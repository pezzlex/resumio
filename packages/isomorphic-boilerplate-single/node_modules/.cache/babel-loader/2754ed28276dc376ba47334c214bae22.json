{"ast":null,"code":"import { filterProps } from '../utils';\nimport { FormatError } from 'intl-messageformat';\nimport { ReactIntlError } from '../error';\nvar LIST_FORMAT_OPTIONS = ['localeMatcher', 'type', 'style'];\nvar now = Date.now();\n\nfunction generateToken(i) {\n  return now + \"_\" + i + \"_\" + now;\n}\n\nexport function formatList(_a, getListFormat, values, options) {\n  var locale = _a.locale,\n      onError = _a.onError;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var ListFormat = Intl.ListFormat;\n\n  if (!ListFormat) {\n    onError(new FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", \"MISSING_INTL_API\"\n    /* MISSING_INTL_API */\n    ));\n  }\n\n  var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\n\n  try {\n    var richValues_1 = {};\n    var serializedValues = values.map(function (v, i) {\n      if (typeof v === 'object') {\n        var id = generateToken(i);\n        richValues_1[id] = v;\n        return id;\n      }\n\n      return String(v);\n    });\n\n    if (!Object.keys(richValues_1).length) {\n      return getListFormat(locale, filteredOptions).format(serializedValues);\n    }\n\n    var parts = getListFormat(locale, filteredOptions).formatToParts(serializedValues);\n    return parts.reduce(function (all, el) {\n      var val = el.value;\n\n      if (richValues_1[val]) {\n        all.push(richValues_1[val]);\n      } else if (typeof all[all.length - 1] === 'string') {\n        all[all.length - 1] += val;\n      } else {\n        all.push(val);\n      }\n\n      return all;\n    }, []);\n  } catch (e) {\n    onError(new ReactIntlError(\"FORMAT_ERROR\"\n    /* FORMAT_ERROR */\n    , 'Error formatting list.', e));\n  }\n\n  return values;\n}","map":{"version":3,"sources":["../../src/formatters/list.ts"],"names":[],"mappings":"AAEA,SAAQ,WAAR,QAA0B,UAA1B;AAEA,SAAQ,WAAR,QAAqC,oBAArC;AACA,SAAQ,cAAR,QAAiD,UAAjD;AAEA,IAAM,mBAAmB,GAAuC,CAC9D,eAD8D,EAE9D,MAF8D,EAG9D,OAH8D,CAAhE;AAMA,IAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;;AAEA,SAAS,aAAT,CAAuB,CAAvB,EAAgC;AAC9B,SAAU,GAAG,GAAA,GAAH,GAAO,CAAP,GAAQ,GAAR,GAAY,GAAtB;AACD;;AAQD,OAAM,SAAU,UAAV,CACJ,EADI,EAEJ,aAFI,EAGJ,MAHI,EAIJ,OAJI,EAIqD;MAHxD,MAAA,GAAA,EAAA,CAAA,M;MAAQ,OAAA,GAAA,EAAA,CAAA,O;;AAGT,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAyD;;AAEzD,MAAM,UAAU,GAA2B,IAAY,CAAC,UAAxD;;AACA,MAAI,CAAC,UAAL,EAAiB;AACf,IAAA,OAAO,CACL,IAAI,WAAJ,CACE,iHADF,EAGL;AAAA;AAHK,KADK,CAAP;AAQD;;AACD,MAAM,eAAe,GAAG,WAAW,CAAC,OAAD,EAAU,mBAAV,CAAnC;;AAEA,MAAI;AACF,QAAM,YAAU,GAAoC,EAApD;AACA,QAAM,gBAAgB,GAAG,MAAM,CAAC,GAAP,CAAW,UAAC,CAAD,EAAI,CAAJ,EAAK;AACvC,UAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B;AACzB,YAAM,EAAE,GAAG,aAAa,CAAC,CAAD,CAAxB;AACA,QAAA,YAAU,CAAC,EAAD,CAAV,GAAiB,CAAjB;AACA,eAAO,EAAP;AACD;;AACD,aAAO,MAAM,CAAC,CAAD,CAAb;AACD,KAPwB,CAAzB;;AAQA,QAAI,CAAC,MAAM,CAAC,IAAP,CAAY,YAAZ,EAAwB,MAA7B,EAAqC;AACnC,aAAO,aAAa,CAAC,MAAD,EAAS,eAAT,CAAb,CAAuC,MAAvC,CAA8C,gBAA9C,CAAP;AACD;;AACD,QAAM,KAAK,GAAG,aAAa,CAAC,MAAD,EAAS,eAAT,CAAb,CAAuC,aAAvC,CACZ,gBADY,CAAd;AAGA,WAAO,KAAK,CAAC,MAAN,CAAa,UAAC,GAAD,EAAuC,EAAvC,EAAyC;AAC3D,UAAM,GAAG,GAAG,EAAE,CAAC,KAAf;;AACA,UAAI,YAAU,CAAC,GAAD,CAAd,EAAqB;AACnB,QAAA,GAAG,CAAC,IAAJ,CAAS,YAAU,CAAC,GAAD,CAAnB;AACD,OAFD,MAEO,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd,CAAV,KAA+B,QAAnC,EAA6C;AAClD,QAAA,GAAG,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd,CAAH,IAAuB,GAAvB;AACD,OAFM,MAEA;AACL,QAAA,GAAG,CAAC,IAAJ,CAAS,GAAT;AACD;;AACD,aAAO,GAAP;AACD,KAVM,EAUJ,EAVI,CAAP;AAWD,GA3BD,CA2BE,OAAO,CAAP,EAAU;AACV,IAAA,OAAO,CACL,IAAI,cAAJ,CAAkB;AAAA;AAAlB,MAEE,wBAFF,EAGE,CAHF,CADK,CAAP;AAOD;;AAED,SAAO,MAAP;AACD","sourceRoot":"","sourcesContent":["import { filterProps } from '../utils';\nimport { FormatError } from 'intl-messageformat';\nimport { ReactIntlError } from '../error';\nvar LIST_FORMAT_OPTIONS = [\n    'localeMatcher',\n    'type',\n    'style',\n];\nvar now = Date.now();\nfunction generateToken(i) {\n    return now + \"_\" + i + \"_\" + now;\n}\nexport function formatList(_a, getListFormat, values, options) {\n    var locale = _a.locale, onError = _a.onError;\n    if (options === void 0) { options = {}; }\n    var ListFormat = Intl.ListFormat;\n    if (!ListFormat) {\n        onError(new FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", \"MISSING_INTL_API\" /* MISSING_INTL_API */));\n    }\n    var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\n    try {\n        var richValues_1 = {};\n        var serializedValues = values.map(function (v, i) {\n            if (typeof v === 'object') {\n                var id = generateToken(i);\n                richValues_1[id] = v;\n                return id;\n            }\n            return String(v);\n        });\n        if (!Object.keys(richValues_1).length) {\n            return getListFormat(locale, filteredOptions).format(serializedValues);\n        }\n        var parts = getListFormat(locale, filteredOptions).formatToParts(serializedValues);\n        return parts.reduce(function (all, el) {\n            var val = el.value;\n            if (richValues_1[val]) {\n                all.push(richValues_1[val]);\n            }\n            else if (typeof all[all.length - 1] === 'string') {\n                all[all.length - 1] += val;\n            }\n            else {\n                all.push(val);\n            }\n            return all;\n        }, []);\n    }\n    catch (e) {\n        onError(new ReactIntlError(\"FORMAT_ERROR\" /* FORMAT_ERROR */, 'Error formatting list.', e));\n    }\n    return values;\n}\n//# sourceMappingURL=list.js.map"]},"metadata":{},"sourceType":"module"}