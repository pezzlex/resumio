{"ast":null,"code":"import { invariant } from './invariant';\nimport { SANCTIONED_UNITS } from './units';\nexport function hasOwnProperty(o, key) {\n  return Object.prototype.hasOwnProperty.call(o, key);\n}\n/**\n * https://tc39.es/ecma262/#sec-toobject\n * @param arg\n */\n\nexport function toObject(arg) {\n  if (arg == null) {\n    throw new TypeError('undefined/null cannot be converted to object');\n  }\n\n  return Object(arg);\n}\n/**\n * https://tc39.es/ecma262/#sec-tostring\n */\n\nexport function toString(o) {\n  // Only symbol is irregular...\n  if (typeof o === 'symbol') {\n    throw TypeError('Cannot convert a Symbol value to a string');\n  }\n\n  return String(o);\n}\n/**\n * https://tc39.es/ecma402/#sec-getoption\n * @param opts\n * @param prop\n * @param type\n * @param values\n * @param fallback\n */\n\nexport function getOption(opts, prop, type, values, fallback) {\n  // const descriptor = Object.getOwnPropertyDescriptor(opts, prop);\n  var value = opts[prop];\n\n  if (value !== undefined) {\n    if (type !== 'boolean' && type !== 'string') {\n      throw new TypeError('invalid type');\n    }\n\n    if (type === 'boolean') {\n      value = Boolean(value);\n    }\n\n    if (type === 'string') {\n      value = toString(value);\n    }\n\n    if (values !== undefined && !values.filter(function (val) {\n      return val == value;\n    }).length) {\n      throw new RangeError(value + \" is not within \" + values.join(', '));\n    }\n\n    return value;\n  }\n\n  return fallback;\n}\n/**\n * https://tc39.es/ecma402/#sec-defaultnumberoption\n * @param val\n * @param min\n * @param max\n * @param fallback\n */\n\nexport function defaultNumberOption(val, min, max, fallback) {\n  if (val !== undefined) {\n    val = Number(val);\n\n    if (isNaN(val) || val < min || val > max) {\n      throw new RangeError(val + \" is outside of range [\" + min + \", \" + max + \"]\");\n    }\n\n    return Math.floor(val);\n  }\n\n  return fallback;\n}\n/**\n * https://tc39.es/ecma402/#sec-getnumberoption\n * @param options\n * @param property\n * @param min\n * @param max\n * @param fallback\n */\n\nexport function getNumberOption(options, property, minimum, maximum, fallback) {\n  var val = options[property];\n  return defaultNumberOption(val, minimum, maximum, fallback);\n}\nexport function setInternalSlot(map, pl, field, value) {\n  if (!map.get(pl)) {\n    map.set(pl, Object.create(null));\n  }\n\n  var slots = map.get(pl);\n  slots[field] = value;\n}\nexport function setMultiInternalSlots(map, pl, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var k = _a[_i];\n    setInternalSlot(map, pl, k, props[k]);\n  }\n}\nexport function getInternalSlot(map, pl, field) {\n  return getMultiInternalSlots(map, pl, field)[field];\n}\nexport function getMultiInternalSlots(map, pl) {\n  var fields = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    fields[_i - 2] = arguments[_i];\n  }\n\n  var slots = map.get(pl);\n\n  if (!slots) {\n    throw new TypeError(pl + \" InternalSlot has not been initialized\");\n  }\n\n  return fields.reduce(function (all, f) {\n    all[f] = slots[f];\n    return all;\n  }, Object.create(null));\n}\nexport function isLiteralPart(patternPart) {\n  return patternPart.type === 'literal';\n}\nexport function partitionPattern(pattern) {\n  var result = [];\n  var beginIndex = pattern.indexOf('{');\n  var endIndex = 0;\n  var nextIndex = 0;\n  var length = pattern.length;\n\n  while (beginIndex < pattern.length && beginIndex > -1) {\n    endIndex = pattern.indexOf('}', beginIndex);\n    invariant(endIndex > beginIndex, \"Invalid pattern \" + pattern);\n\n    if (beginIndex > nextIndex) {\n      result.push({\n        type: 'literal',\n        value: pattern.substring(nextIndex, beginIndex)\n      });\n    }\n\n    result.push({\n      type: pattern.substring(beginIndex + 1, endIndex),\n      value: undefined\n    });\n    nextIndex = endIndex + 1;\n    beginIndex = pattern.indexOf('{', nextIndex);\n  }\n\n  if (nextIndex < length) {\n    result.push({\n      type: 'literal',\n      value: pattern.substring(nextIndex, length)\n    });\n  }\n\n  return result;\n}\n/**\n * https://tc39.es/ecma402/#sec-setnfdigitoptions\n */\n\nexport function setNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {\n  var mnid = getNumberOption(opts, 'minimumIntegerDigits', 1, 21, 1);\n  var mnfd = opts.minimumFractionDigits;\n  var mxfd = opts.maximumFractionDigits;\n  var mnsd = opts.minimumSignificantDigits;\n  var mxsd = opts.maximumSignificantDigits;\n  internalSlots.minimumIntegerDigits = mnid;\n\n  if (mnsd !== undefined || mxsd !== undefined) {\n    internalSlots.roundingType = 'significantDigits';\n    mnsd = defaultNumberOption(mnsd, 1, 21, 1);\n    mxsd = defaultNumberOption(mxsd, mnsd, 21, 21);\n    internalSlots.minimumSignificantDigits = mnsd;\n    internalSlots.maximumSignificantDigits = mxsd;\n  } else if (mnfd !== undefined || mxfd !== undefined) {\n    internalSlots.roundingType = 'fractionDigits';\n    mnfd = defaultNumberOption(mnfd, 0, 20, mnfdDefault);\n    var mxfdActualDefault = Math.max(mnfd, mxfdDefault);\n    mxfd = defaultNumberOption(mxfd, mnfd, 20, mxfdActualDefault);\n    internalSlots.minimumFractionDigits = mnfd;\n    internalSlots.maximumFractionDigits = mxfd;\n  } else if (notation === 'compact') {\n    internalSlots.roundingType = 'compactRounding';\n  } else {\n    internalSlots.roundingType = 'fractionDigits';\n    internalSlots.minimumFractionDigits = mnfdDefault;\n    internalSlots.maximumFractionDigits = mxfdDefault;\n  }\n}\nexport function objectIs(x, y) {\n  if (Object.is) {\n    return Object.is(x, y);\n  } // SameValue algorithm\n\n\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  } // Step 6.a: NaN == NaN\n\n\n  return x !== x && y !== y;\n}\nvar NOT_A_Z_REGEX = /[^A-Z]/;\n/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\n\nfunction toUpperCase(str) {\n  return str.replace(/([a-z])/g, function (_, c) {\n    return c.toUpperCase();\n  });\n}\n/**\n * https://tc39.es/ecma402/#sec-iswellformedcurrencycode\n */\n\n\nexport function isWellFormedCurrencyCode(currency) {\n  currency = toUpperCase(currency);\n\n  if (currency.length !== 3) {\n    return false;\n  }\n\n  if (NOT_A_Z_REGEX.test(currency)) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n * TODO: dedup with intl-pluralrules\n */\n\nexport function formatNumericToString(internalSlots, x) {\n  var isNegative = x < 0 || objectIs(x, -0);\n\n  if (isNegative) {\n    x = -x;\n  }\n\n  var result;\n  var rourndingType = internalSlots.roundingType;\n\n  switch (rourndingType) {\n    case 'significantDigits':\n      result = toRawPrecision(x, internalSlots.minimumSignificantDigits, internalSlots.maximumSignificantDigits);\n      break;\n\n    case 'fractionDigits':\n      result = toRawFixed(x, internalSlots.minimumFractionDigits, internalSlots.maximumFractionDigits);\n      break;\n\n    default:\n      result = toRawPrecision(x, 1, 2);\n\n      if (result.integerDigitsCount > 1) {\n        result = toRawFixed(x, 0, 0);\n      }\n\n      break;\n  }\n\n  x = result.roundedNumber;\n  var string = result.formattedString;\n  var int = result.integerDigitsCount;\n  var minInteger = internalSlots.minimumIntegerDigits;\n\n  if (int < minInteger) {\n    var forwardZeros = repeat('0', minInteger - int);\n    string = forwardZeros + string;\n  }\n\n  if (isNegative) {\n    x = -x;\n  }\n\n  return {\n    roundedNumber: x,\n    formattedString: string\n  };\n}\n/**\n * TODO: dedup with intl-pluralrules and support BigInt\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x a finite non-negative Number or BigInt\n * @param minFraction and integer between 0 and 20\n * @param maxFraction and integer between 0 and 20\n */\n\nexport function toRawFixed(x, minFraction, maxFraction) {\n  var f = maxFraction;\n  var n = Math.round(x * Math.pow(10, f));\n  var xFinal = n / Math.pow(10, f); // n is a positive integer, but it is possible to be greater than 1e21.\n  // In such case we will go the slow path.\n  // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\n\n  var m;\n\n  if (n < 1e21) {\n    m = n.toString();\n  } else {\n    m = n.toString();\n\n    var _a = m.split('e'),\n        mantissa = _a[0],\n        exponent = _a[1];\n\n    m = mantissa.replace('.', '');\n    m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));\n  }\n\n  var int;\n\n  if (f !== 0) {\n    var k = m.length;\n\n    if (k <= f) {\n      var z = repeat('0', f + 1 - k);\n      m = z + m;\n      k = f + 1;\n    }\n\n    var a = m.slice(0, k - f);\n    var b = m.slice(k - f);\n    m = a + \".\" + b;\n    int = a.length;\n  } else {\n    int = m.length;\n  }\n\n  var cut = maxFraction - minFraction;\n\n  while (cut > 0 && m[m.length - 1] === '0') {\n    m = m.slice(0, -1);\n    cut--;\n  }\n\n  if (m[m.length - 1] === '.') {\n    m = m.slice(0, -1);\n  }\n\n  return {\n    formattedString: m,\n    roundedNumber: xFinal,\n    integerDigitsCount: int\n  };\n} // https://tc39.es/ecma402/#sec-torawprecision\n\nexport function toRawPrecision(x, minPrecision, maxPrecision) {\n  var p = maxPrecision;\n  var m;\n  var e;\n  var xFinal;\n\n  if (x === 0) {\n    m = repeat('0', p);\n    e = 0;\n    xFinal = 0;\n  } else {\n    var xToString = x.toString(); // If xToString is formatted as scientific notation, the number is either very small or very\n    // large. If the precision of the formatted string is lower that requested max precision, we\n    // should still infer them from the formatted string, otherwise the formatted result might have\n    // precision loss (e.g. 1e41 will not have 0 in every trailing digits).\n\n    var xToStringExponentIndex = xToString.indexOf('e');\n\n    var _a = xToString.split('e'),\n        xToStringMantissa = _a[0],\n        xToStringExponent = _a[1];\n\n    var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');\n\n    if (xToStringExponentIndex >= 0 && xToStringMantissaWithoutDecimalPoint.length <= p) {\n      e = +xToStringExponent;\n      m = xToStringMantissaWithoutDecimalPoint + repeat('0', p - xToStringMantissaWithoutDecimalPoint.length);\n      xFinal = x;\n    } else {\n      e = getMagnitude(x);\n      var decimalPlaceOffset = e - p + 1; // n is the integer containing the required precision digits. To derive the formatted string,\n      // we will adjust its decimal place in the logic below.\n\n      var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset)); // The rounding caused the change of magnitude, so we should increment `e` by 1.\n\n      if (adjustDecimalPlace(n, p - 1) >= 10) {\n        e = e + 1; // Divide n by 10 to swallow one precision.\n\n        n = Math.floor(n / 10);\n      }\n\n      m = n.toString(); // Equivalent of n * 10 ** (e - p + 1)\n\n      xFinal = adjustDecimalPlace(n, p - 1 - e);\n    }\n  }\n\n  var int;\n\n  if (e >= p - 1) {\n    m = m + repeat('0', e - p + 1);\n    int = e + 1;\n  } else if (e >= 0) {\n    m = m.slice(0, e + 1) + \".\" + m.slice(e + 1);\n    int = e + 1;\n  } else {\n    m = \"0.\" + repeat('0', -e - 1) + m;\n    int = 1;\n  }\n\n  if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {\n    var cut = maxPrecision - minPrecision;\n\n    while (cut > 0 && m[m.length - 1] === '0') {\n      m = m.slice(0, -1);\n      cut--;\n    }\n\n    if (m[m.length - 1] === '.') {\n      m = m.slice(0, -1);\n    }\n  }\n\n  return {\n    formattedString: m,\n    roundedNumber: xFinal,\n    integerDigitsCount: int\n  }; // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.\n\n  function adjustDecimalPlace(x, magnitude) {\n    return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);\n  }\n}\nexport function repeat(s, times) {\n  if (typeof s.repeat === 'function') {\n    return s.repeat(times);\n  }\n\n  var arr = new Array(times);\n\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = s;\n  }\n\n  return arr.join('');\n}\n/**\n * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue\n * @param x number\n */\n\nexport function getMagnitude(x) {\n  // Cannot count string length via Number.toString because it may use scientific notation\n  // for very small or very large numbers.\n  return Math.floor(Math.log(x) * Math.LOG10E);\n}\n/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\n\nfunction toLowerCase(str) {\n  return str.replace(/([A-Z])/g, function (_, c) {\n    return c.toLowerCase();\n  });\n}\n\nvar SHORTENED_SACTION_UNITS = SANCTIONED_UNITS.map(function (unit) {\n  return unit.replace(/^(.*?)-/, '');\n});\n/**\n * https://tc39.es/ecma402/#sec-iswellformedunitidentifier\n * @param unit\n */\n\nexport function isWellFormedUnitIdentifier(unit) {\n  unit = toLowerCase(unit);\n\n  if (SHORTENED_SACTION_UNITS.indexOf(unit) > -1) {\n    return true;\n  }\n\n  var units = unit.split('-per-');\n\n  if (units.length !== 2) {\n    return false;\n  }\n\n  if (SHORTENED_SACTION_UNITS.indexOf(units[0]) < 0 || SHORTENED_SACTION_UNITS.indexOf(units[1]) < 0) {\n    return false;\n  }\n\n  return true;\n}\n/*\n  17 ECMAScript Standard Built-in Objects:\n    Every built-in Function object, including constructors, that is not\n    identified as an anonymous function has a name property whose value\n    is a String.\n\n    Unless otherwise specified, the name property of a built-in Function\n    object, if it exists, has the attributes { [[Writable]]: false,\n    [[Enumerable]]: false, [[Configurable]]: true }.\n*/\n\nexport function defineProperty(target, name, _a) {\n  var value = _a.value;\n  Object.defineProperty(target, name, {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: value\n  });\n}","map":{"version":3,"sources":["../src/polyfill-utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { invariant } from './invariant';\nimport { SANCTIONED_UNITS } from './units';\nexport function hasOwnProperty(o, key) {\n    return Object.prototype.hasOwnProperty.call(o, key);\n}\n/**\n * https://tc39.es/ecma262/#sec-toobject\n * @param arg\n */\nexport function toObject(arg) {\n    if (arg == null) {\n        throw new TypeError('undefined/null cannot be converted to object');\n    }\n    return Object(arg);\n}\n/**\n * https://tc39.es/ecma262/#sec-tostring\n */\nexport function toString(o) {\n    // Only symbol is irregular...\n    if (typeof o === 'symbol') {\n        throw TypeError('Cannot convert a Symbol value to a string');\n    }\n    return String(o);\n}\n/**\n * https://tc39.es/ecma402/#sec-getoption\n * @param opts\n * @param prop\n * @param type\n * @param values\n * @param fallback\n */\nexport function getOption(opts, prop, type, values, fallback) {\n    // const descriptor = Object.getOwnPropertyDescriptor(opts, prop);\n    var value = opts[prop];\n    if (value !== undefined) {\n        if (type !== 'boolean' && type !== 'string') {\n            throw new TypeError('invalid type');\n        }\n        if (type === 'boolean') {\n            value = Boolean(value);\n        }\n        if (type === 'string') {\n            value = toString(value);\n        }\n        if (values !== undefined && !values.filter(function (val) { return val == value; }).length) {\n            throw new RangeError(value + \" is not within \" + values.join(', '));\n        }\n        return value;\n    }\n    return fallback;\n}\n/**\n * https://tc39.es/ecma402/#sec-defaultnumberoption\n * @param val\n * @param min\n * @param max\n * @param fallback\n */\nexport function defaultNumberOption(val, min, max, fallback) {\n    if (val !== undefined) {\n        val = Number(val);\n        if (isNaN(val) || val < min || val > max) {\n            throw new RangeError(val + \" is outside of range [\" + min + \", \" + max + \"]\");\n        }\n        return Math.floor(val);\n    }\n    return fallback;\n}\n/**\n * https://tc39.es/ecma402/#sec-getnumberoption\n * @param options\n * @param property\n * @param min\n * @param max\n * @param fallback\n */\nexport function getNumberOption(options, property, minimum, maximum, fallback) {\n    var val = options[property];\n    return defaultNumberOption(val, minimum, maximum, fallback);\n}\nexport function setInternalSlot(map, pl, field, value) {\n    if (!map.get(pl)) {\n        map.set(pl, Object.create(null));\n    }\n    var slots = map.get(pl);\n    slots[field] = value;\n}\nexport function setMultiInternalSlots(map, pl, props) {\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n        var k = _a[_i];\n        setInternalSlot(map, pl, k, props[k]);\n    }\n}\nexport function getInternalSlot(map, pl, field) {\n    return getMultiInternalSlots(map, pl, field)[field];\n}\nexport function getMultiInternalSlots(map, pl) {\n    var fields = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        fields[_i - 2] = arguments[_i];\n    }\n    var slots = map.get(pl);\n    if (!slots) {\n        throw new TypeError(pl + \" InternalSlot has not been initialized\");\n    }\n    return fields.reduce(function (all, f) {\n        all[f] = slots[f];\n        return all;\n    }, Object.create(null));\n}\nexport function isLiteralPart(patternPart) {\n    return patternPart.type === 'literal';\n}\nexport function partitionPattern(pattern) {\n    var result = [];\n    var beginIndex = pattern.indexOf('{');\n    var endIndex = 0;\n    var nextIndex = 0;\n    var length = pattern.length;\n    while (beginIndex < pattern.length && beginIndex > -1) {\n        endIndex = pattern.indexOf('}', beginIndex);\n        invariant(endIndex > beginIndex, \"Invalid pattern \" + pattern);\n        if (beginIndex > nextIndex) {\n            result.push({\n                type: 'literal',\n                value: pattern.substring(nextIndex, beginIndex),\n            });\n        }\n        result.push({\n            type: pattern.substring(beginIndex + 1, endIndex),\n            value: undefined,\n        });\n        nextIndex = endIndex + 1;\n        beginIndex = pattern.indexOf('{', nextIndex);\n    }\n    if (nextIndex < length) {\n        result.push({\n            type: 'literal',\n            value: pattern.substring(nextIndex, length),\n        });\n    }\n    return result;\n}\n/**\n * https://tc39.es/ecma402/#sec-setnfdigitoptions\n */\nexport function setNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {\n    var mnid = getNumberOption(opts, 'minimumIntegerDigits', 1, 21, 1);\n    var mnfd = opts.minimumFractionDigits;\n    var mxfd = opts.maximumFractionDigits;\n    var mnsd = opts.minimumSignificantDigits;\n    var mxsd = opts.maximumSignificantDigits;\n    internalSlots.minimumIntegerDigits = mnid;\n    if (mnsd !== undefined || mxsd !== undefined) {\n        internalSlots.roundingType = 'significantDigits';\n        mnsd = defaultNumberOption(mnsd, 1, 21, 1);\n        mxsd = defaultNumberOption(mxsd, mnsd, 21, 21);\n        internalSlots.minimumSignificantDigits = mnsd;\n        internalSlots.maximumSignificantDigits = mxsd;\n    }\n    else if (mnfd !== undefined || mxfd !== undefined) {\n        internalSlots.roundingType = 'fractionDigits';\n        mnfd = defaultNumberOption(mnfd, 0, 20, mnfdDefault);\n        var mxfdActualDefault = Math.max(mnfd, mxfdDefault);\n        mxfd = defaultNumberOption(mxfd, mnfd, 20, mxfdActualDefault);\n        internalSlots.minimumFractionDigits = mnfd;\n        internalSlots.maximumFractionDigits = mxfd;\n    }\n    else if (notation === 'compact') {\n        internalSlots.roundingType = 'compactRounding';\n    }\n    else {\n        internalSlots.roundingType = 'fractionDigits';\n        internalSlots.minimumFractionDigits = mnfdDefault;\n        internalSlots.maximumFractionDigits = mxfdDefault;\n    }\n}\nexport function objectIs(x, y) {\n    if (Object.is) {\n        return Object.is(x, y);\n    }\n    // SameValue algorithm\n    if (x === y) {\n        // Steps 1-5, 7-10\n        // Steps 6.b-6.e: +0 != -0\n        return x !== 0 || 1 / x === 1 / y;\n    }\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n}\nvar NOT_A_Z_REGEX = /[^A-Z]/;\n/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\nfunction toUpperCase(str) {\n    return str.replace(/([a-z])/g, function (_, c) { return c.toUpperCase(); });\n}\n/**\n * https://tc39.es/ecma402/#sec-iswellformedcurrencycode\n */\nexport function isWellFormedCurrencyCode(currency) {\n    currency = toUpperCase(currency);\n    if (currency.length !== 3) {\n        return false;\n    }\n    if (NOT_A_Z_REGEX.test(currency)) {\n        return false;\n    }\n    return true;\n}\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n * TODO: dedup with intl-pluralrules\n */\nexport function formatNumericToString(internalSlots, x) {\n    var isNegative = x < 0 || objectIs(x, -0);\n    if (isNegative) {\n        x = -x;\n    }\n    var result;\n    var rourndingType = internalSlots.roundingType;\n    switch (rourndingType) {\n        case 'significantDigits':\n            result = toRawPrecision(x, internalSlots.minimumSignificantDigits, internalSlots.maximumSignificantDigits);\n            break;\n        case 'fractionDigits':\n            result = toRawFixed(x, internalSlots.minimumFractionDigits, internalSlots.maximumFractionDigits);\n            break;\n        default:\n            result = toRawPrecision(x, 1, 2);\n            if (result.integerDigitsCount > 1) {\n                result = toRawFixed(x, 0, 0);\n            }\n            break;\n    }\n    x = result.roundedNumber;\n    var string = result.formattedString;\n    var int = result.integerDigitsCount;\n    var minInteger = internalSlots.minimumIntegerDigits;\n    if (int < minInteger) {\n        var forwardZeros = repeat('0', minInteger - int);\n        string = forwardZeros + string;\n    }\n    if (isNegative) {\n        x = -x;\n    }\n    return { roundedNumber: x, formattedString: string };\n}\n/**\n * TODO: dedup with intl-pluralrules and support BigInt\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x a finite non-negative Number or BigInt\n * @param minFraction and integer between 0 and 20\n * @param maxFraction and integer between 0 and 20\n */\nexport function toRawFixed(x, minFraction, maxFraction) {\n    var f = maxFraction;\n    var n = Math.round(x * Math.pow(10, f));\n    var xFinal = n / Math.pow(10, f);\n    // n is a positive integer, but it is possible to be greater than 1e21.\n    // In such case we will go the slow path.\n    // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\n    var m;\n    if (n < 1e21) {\n        m = n.toString();\n    }\n    else {\n        m = n.toString();\n        var _a = m.split('e'), mantissa = _a[0], exponent = _a[1];\n        m = mantissa.replace('.', '');\n        m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));\n    }\n    var int;\n    if (f !== 0) {\n        var k = m.length;\n        if (k <= f) {\n            var z = repeat('0', f + 1 - k);\n            m = z + m;\n            k = f + 1;\n        }\n        var a = m.slice(0, k - f);\n        var b = m.slice(k - f);\n        m = a + \".\" + b;\n        int = a.length;\n    }\n    else {\n        int = m.length;\n    }\n    var cut = maxFraction - minFraction;\n    while (cut > 0 && m[m.length - 1] === '0') {\n        m = m.slice(0, -1);\n        cut--;\n    }\n    if (m[m.length - 1] === '.') {\n        m = m.slice(0, -1);\n    }\n    return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };\n}\n// https://tc39.es/ecma402/#sec-torawprecision\nexport function toRawPrecision(x, minPrecision, maxPrecision) {\n    var p = maxPrecision;\n    var m;\n    var e;\n    var xFinal;\n    if (x === 0) {\n        m = repeat('0', p);\n        e = 0;\n        xFinal = 0;\n    }\n    else {\n        var xToString = x.toString();\n        // If xToString is formatted as scientific notation, the number is either very small or very\n        // large. If the precision of the formatted string is lower that requested max precision, we\n        // should still infer them from the formatted string, otherwise the formatted result might have\n        // precision loss (e.g. 1e41 will not have 0 in every trailing digits).\n        var xToStringExponentIndex = xToString.indexOf('e');\n        var _a = xToString.split('e'), xToStringMantissa = _a[0], xToStringExponent = _a[1];\n        var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');\n        if (xToStringExponentIndex >= 0 &&\n            xToStringMantissaWithoutDecimalPoint.length <= p) {\n            e = +xToStringExponent;\n            m =\n                xToStringMantissaWithoutDecimalPoint +\n                    repeat('0', p - xToStringMantissaWithoutDecimalPoint.length);\n            xFinal = x;\n        }\n        else {\n            e = getMagnitude(x);\n            var decimalPlaceOffset = e - p + 1;\n            // n is the integer containing the required precision digits. To derive the formatted string,\n            // we will adjust its decimal place in the logic below.\n            var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset));\n            // The rounding caused the change of magnitude, so we should increment `e` by 1.\n            if (adjustDecimalPlace(n, p - 1) >= 10) {\n                e = e + 1;\n                // Divide n by 10 to swallow one precision.\n                n = Math.floor(n / 10);\n            }\n            m = n.toString();\n            // Equivalent of n * 10 ** (e - p + 1)\n            xFinal = adjustDecimalPlace(n, p - 1 - e);\n        }\n    }\n    var int;\n    if (e >= p - 1) {\n        m = m + repeat('0', e - p + 1);\n        int = e + 1;\n    }\n    else if (e >= 0) {\n        m = m.slice(0, e + 1) + \".\" + m.slice(e + 1);\n        int = e + 1;\n    }\n    else {\n        m = \"0.\" + repeat('0', -e - 1) + m;\n        int = 1;\n    }\n    if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {\n        var cut = maxPrecision - minPrecision;\n        while (cut > 0 && m[m.length - 1] === '0') {\n            m = m.slice(0, -1);\n            cut--;\n        }\n        if (m[m.length - 1] === '.') {\n            m = m.slice(0, -1);\n        }\n    }\n    return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };\n    // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.\n    function adjustDecimalPlace(x, magnitude) {\n        return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);\n    }\n}\nexport function repeat(s, times) {\n    if (typeof s.repeat === 'function') {\n        return s.repeat(times);\n    }\n    var arr = new Array(times);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = s;\n    }\n    return arr.join('');\n}\n/**\n * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue\n * @param x number\n */\nexport function getMagnitude(x) {\n    // Cannot count string length via Number.toString because it may use scientific notation\n    // for very small or very large numbers.\n    return Math.floor(Math.log(x) * Math.LOG10E);\n}\n/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\nfunction toLowerCase(str) {\n    return str.replace(/([A-Z])/g, function (_, c) { return c.toLowerCase(); });\n}\nvar SHORTENED_SACTION_UNITS = SANCTIONED_UNITS.map(function (unit) {\n    return unit.replace(/^(.*?)-/, '');\n});\n/**\n * https://tc39.es/ecma402/#sec-iswellformedunitidentifier\n * @param unit\n */\nexport function isWellFormedUnitIdentifier(unit) {\n    unit = toLowerCase(unit);\n    if (SHORTENED_SACTION_UNITS.indexOf(unit) > -1) {\n        return true;\n    }\n    var units = unit.split('-per-');\n    if (units.length !== 2) {\n        return false;\n    }\n    if (SHORTENED_SACTION_UNITS.indexOf(units[0]) < 0 ||\n        SHORTENED_SACTION_UNITS.indexOf(units[1]) < 0) {\n        return false;\n    }\n    return true;\n}\n/*\n  17 ECMAScript Standard Built-in Objects:\n    Every built-in Function object, including constructors, that is not\n    identified as an anonymous function has a name property whose value\n    is a String.\n\n    Unless otherwise specified, the name property of a built-in Function\n    object, if it exists, has the attributes { [[Writable]]: false,\n    [[Enumerable]]: false, [[Configurable]]: true }.\n*/\nexport function defineProperty(target, name, _a) {\n    var value = _a.value;\n    Object.defineProperty(target, name, {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: value,\n    });\n}\n//# sourceMappingURL=polyfill-utils.js.map"]},"metadata":{},"sourceType":"module"}