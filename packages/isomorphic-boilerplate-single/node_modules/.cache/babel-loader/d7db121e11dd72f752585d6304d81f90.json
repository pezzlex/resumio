{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\n/**\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\n * reduced values from the left\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @see R.reduce, R.mapAccum\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */\n\nvar scan = /*#__PURE__*/_curry3(function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [acc];\n\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n\n  return result;\n});\n\nexport default scan;","map":{"version":3,"sources":["/Users/pezannekhambatta/Desktop/resumio/node_modules/ramda/es/scan.js"],"names":["_curry3","scan","fn","acc","list","idx","len","length","result"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAIC,IAAI,GAAG,aAAaD,OAAO,CAAC,SAASC,IAAT,CAAcC,EAAd,EAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AAC3D,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACG,MAAf;AACA,MAAIC,MAAM,GAAG,CAACL,GAAD,CAAb;;AACA,SAAOE,GAAG,GAAGC,GAAb,EAAkB;AAChBH,IAAAA,GAAG,GAAGD,EAAE,CAACC,GAAD,EAAMC,IAAI,CAACC,GAAD,CAAV,CAAR;AACAG,IAAAA,MAAM,CAACH,GAAG,GAAG,CAAP,CAAN,GAAkBF,GAAlB;AACAE,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOG,MAAP;AACD,CAV8B,CAA/B;;AAWA,eAAeP,IAAf","sourcesContent":["import _curry3 from './internal/_curry3.js';\n\n/**\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\n * reduced values from the left\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @see R.reduce, R.mapAccum\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */\nvar scan = /*#__PURE__*/_curry3(function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [acc];\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n  return result;\n});\nexport default scan;"]},"metadata":{},"sourceType":"module"}