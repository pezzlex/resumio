{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _scale = _interopRequireDefault(require(\"./scale\"));\n\nvar _offset = _interopRequireDefault(require(\"./offset\"));\n\nvar _getFont = _interopRequireDefault(require(\"./getFont\"));\n\nvar _slice = _interopRequireDefault(require(\"../glyph/slice\"));\n\nvar _glyphIndexAt = _interopRequireDefault(require(\"./glyphIndexAt\"));\n\nvar _normalize = _interopRequireDefault(require(\"../indices/normalize\"));\n/**\n * Slice run between glyph indices range\n *\n * @param  {number}  start glyph index\n * @param  {number}  end glyph index\n * @param  {Object}  run\n * @return {Object} sliced run\n */\n\n\nvar slice = function slice(start, end, run) {\n  var runScale = (0, _scale[\"default\"])(run);\n  var font = (0, _getFont[\"default\"])(run); // Get glyph start and end indices\n\n  var glyphStartIndex = (0, _glyphIndexAt[\"default\"])(start, run);\n  var glyphEndIndex = (0, _glyphIndexAt[\"default\"])(end, run); // Get start and end glyph\n\n  var startGlyph = R.path(['glyphs', glyphStartIndex], run);\n  var endGlyph = R.path(['glyphs', glyphEndIndex], run); // Get start ligature chunks (if any)\n\n  var startOffset = (0, _offset[\"default\"])(start, run);\n  var startGlyphs = startOffset > 0 ? (0, _slice[\"default\"])(startOffset, Infinity, font, startGlyph) : []; // Get end ligature chunks (if any)\n\n  var endOffset = (0, _offset[\"default\"])(end, run);\n  var endGlyphs = (0, _slice[\"default\"])(0, endOffset, font, endGlyph);\n  var sliceOffset = Math.min(1, startOffset);\n  return R.evolve({\n    start: R.add(start),\n    end: R.compose(R.apply(R.min), R.juxt([R.identity, // string.end\n    R.o(R.add(end), R.always(run.start)) // end + string.start\n    ])),\n    glyphs: function glyphs(_glyphs) {\n      return R.flatten([startGlyphs, _glyphs.slice(glyphStartIndex + sliceOffset, glyphEndIndex), endGlyphs]);\n    },\n    positions: function positions(_positions) {\n      return R.flatten([startGlyphs.map(function (g) {\n        return {\n          xAdvance: g.advanceWidth * runScale\n        };\n      }), _positions.slice(glyphStartIndex + sliceOffset, glyphEndIndex), endGlyphs.map(function (g) {\n        return {\n          xAdvance: g.advanceWidth * runScale\n        };\n      })]);\n    },\n    glyphIndices: R.o(_normalize[\"default\"], R.slice(start, end)),\n    attributes: R.identity\n  })(run);\n};\n\nvar _default = R.curryN(3, slice);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/pezannekhambatta/Desktop/resumio/node_modules/@react-pdf/textkit/run/slice.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","R","_scale","_offset","_getFont","_slice","_glyphIndexAt","_normalize","slice","start","end","run","runScale","font","glyphStartIndex","glyphEndIndex","startGlyph","path","endGlyph","startOffset","startGlyphs","Infinity","endOffset","endGlyphs","sliceOffset","Math","min","evolve","add","compose","apply","juxt","identity","o","always","glyphs","_glyphs","flatten","positions","_positions","map","g","xAdvance","advanceWidth","glyphIndices","attributes","_default","curryN"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _scale = _interopRequireDefault(require(\"./scale\"));\n\nvar _offset = _interopRequireDefault(require(\"./offset\"));\n\nvar _getFont = _interopRequireDefault(require(\"./getFont\"));\n\nvar _slice = _interopRequireDefault(require(\"../glyph/slice\"));\n\nvar _glyphIndexAt = _interopRequireDefault(require(\"./glyphIndexAt\"));\n\nvar _normalize = _interopRequireDefault(require(\"../indices/normalize\"));\n\n/**\n * Slice run between glyph indices range\n *\n * @param  {number}  start glyph index\n * @param  {number}  end glyph index\n * @param  {Object}  run\n * @return {Object} sliced run\n */\nvar slice = function slice(start, end, run) {\n  var runScale = (0, _scale[\"default\"])(run);\n  var font = (0, _getFont[\"default\"])(run); // Get glyph start and end indices\n\n  var glyphStartIndex = (0, _glyphIndexAt[\"default\"])(start, run);\n  var glyphEndIndex = (0, _glyphIndexAt[\"default\"])(end, run); // Get start and end glyph\n\n  var startGlyph = R.path(['glyphs', glyphStartIndex], run);\n  var endGlyph = R.path(['glyphs', glyphEndIndex], run); // Get start ligature chunks (if any)\n\n  var startOffset = (0, _offset[\"default\"])(start, run);\n  var startGlyphs = startOffset > 0 ? (0, _slice[\"default\"])(startOffset, Infinity, font, startGlyph) : []; // Get end ligature chunks (if any)\n\n  var endOffset = (0, _offset[\"default\"])(end, run);\n  var endGlyphs = (0, _slice[\"default\"])(0, endOffset, font, endGlyph);\n  var sliceOffset = Math.min(1, startOffset);\n  return R.evolve({\n    start: R.add(start),\n    end: R.compose(R.apply(R.min), R.juxt([R.identity, // string.end\n    R.o(R.add(end), R.always(run.start)) // end + string.start\n    ])),\n    glyphs: function glyphs(_glyphs) {\n      return R.flatten([startGlyphs, _glyphs.slice(glyphStartIndex + sliceOffset, glyphEndIndex), endGlyphs]);\n    },\n    positions: function positions(_positions) {\n      return R.flatten([startGlyphs.map(function (g) {\n        return {\n          xAdvance: g.advanceWidth * runScale\n        };\n      }), _positions.slice(glyphStartIndex + sliceOffset, glyphEndIndex), endGlyphs.map(function (g) {\n        return {\n          xAdvance: g.advanceWidth * runScale\n        };\n      })]);\n    },\n    glyphIndices: R.o(_normalize[\"default\"], R.slice(start, end)),\n    attributes: R.identity\n  })(run);\n};\n\nvar _default = R.curryN(3, slice);\n\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}