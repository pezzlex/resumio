{"ast":null,"code":"import { EventEmitter } from 'events';\nimport Auth0Lock from 'auth0-lock';\nimport history from '@iso/lib/helpers/history';\nimport Auth0Config from '@iso/config/auth0.config';\nimport notification from '@iso/components/Feedback/Notification';\n\nclass Auth0 extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n    this.lock = new Auth0Lock(Auth0Config.clientID, Auth0Config.domain, Auth0Config.options);\n\n    this.login = () => {\n      if (!this.lock) {\n        return;\n      }\n\n      this.lock.show();\n    };\n\n    this.handleAuthentication = () => {\n      // Add callback Lock's `authenticated` event\n      this.lock.on('authenticated', this.setSession); // Add callback for Lock's `authorization_error` event\n\n      this.lock.on('authorization_error', error => notification('error', 'Wrong mail or password'));\n    };\n\n    this.setSession = authResult => {\n      // Set the time that the access token will expire at\n      let expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n      localStorage.setItem('access_token', authResult.accessToken);\n      localStorage.setItem('id_token', authResult.idToken);\n      localStorage.setItem('expires_at', expiresAt); // navigate to the dashboard route\n\n      history.replace('/dashboard');\n    };\n\n    this.logout = () => {\n      // Clear access token and ID token from local storage\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('expires_at'); // navigate to the home route\n\n      history.replace('/');\n    };\n\n    this.isAuthenticated = () => {\n      let expiresAt = JSON.parse(localStorage.getItem('expiresAt'));\n      return new Date().getTime() < expiresAt;\n    };\n  }\n\n}\n\nexport default new Auth0();","map":{"version":3,"sources":["/Users/pezannekhambatta/Desktop/resumio/packages/isomorphic-boilerplate-single/src/containers/Authentication/Auth0/Auth0.js"],"names":["EventEmitter","Auth0Lock","history","Auth0Config","notification","Auth0","lock","clientID","domain","options","login","show","handleAuthentication","on","setSession","error","authResult","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","accessToken","idToken","replace","logout","removeItem","isAuthenticated","parse","getItem"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,KAAN,SAAoBL,YAApB,CAAiC;AAAA;AAAA;AAAA,SAC/BM,IAD+B,GACxB,IAAIL,SAAJ,CACLE,WAAW,CAACI,QADP,EAELJ,WAAW,CAACK,MAFP,EAGLL,WAAW,CAACM,OAHP,CADwB;;AAAA,SAO/BC,KAP+B,GAOvB,MAAM;AACZ,UAAI,CAAC,KAAKJ,IAAV,EAAgB;AACd;AACD;;AACD,WAAKA,IAAL,CAAUK,IAAV;AACD,KAZ8B;;AAAA,SAa/BC,oBAb+B,GAaR,MAAM;AAC3B;AACA,WAAKN,IAAL,CAAUO,EAAV,CAAa,eAAb,EAA8B,KAAKC,UAAnC,EAF2B,CAG3B;;AACA,WAAKR,IAAL,CAAUO,EAAV,CAAa,qBAAb,EAAoCE,KAAK,IACvCX,YAAY,CAAC,OAAD,EAAU,wBAAV,CADd;AAGD,KApB8B;;AAAA,SAqB/BU,UArB+B,GAqBlBE,UAAU,IAAI;AACzB;AACA,UAAIC,SAAS,GAAGC,IAAI,CAACC,SAAL,CACdH,UAAU,CAACI,SAAX,GAAuB,IAAvB,GAA8B,IAAIC,IAAJ,GAAWC,OAAX,EADhB,CAAhB;AAGAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCR,UAAU,CAACS,WAAhD;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCR,UAAU,CAACU,OAA5C;AACAH,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCP,SAAnC,EAPyB,CAQzB;;AACAf,MAAAA,OAAO,CAACyB,OAAR,CAAgB,YAAhB;AACD,KA/B8B;;AAAA,SAgC/BC,MAhC+B,GAgCtB,MAAM;AACb;AACAL,MAAAA,YAAY,CAACM,UAAb,CAAwB,cAAxB;AACAN,MAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACAN,MAAAA,YAAY,CAACM,UAAb,CAAwB,YAAxB,EAJa,CAKb;;AACA3B,MAAAA,OAAO,CAACyB,OAAR,CAAgB,GAAhB;AACD,KAvC8B;;AAAA,SAyC/BG,eAzC+B,GAyCb,MAAM;AACtB,UAAIb,SAAS,GAAGC,IAAI,CAACa,KAAL,CAAWR,YAAY,CAACS,OAAb,CAAqB,WAArB,CAAX,CAAhB;AACA,aAAO,IAAIX,IAAJ,GAAWC,OAAX,KAAuBL,SAA9B;AACD,KA5C8B;AAAA;;AAAA;;AA8CjC,eAAe,IAAIZ,KAAJ,EAAf","sourcesContent":["import { EventEmitter } from 'events';\nimport Auth0Lock from 'auth0-lock';\nimport history from '@iso/lib/helpers/history';\nimport Auth0Config from '@iso/config/auth0.config';\nimport notification from '@iso/components/Feedback/Notification';\n\nclass Auth0 extends EventEmitter {\n  lock = new Auth0Lock(\n    Auth0Config.clientID,\n    Auth0Config.domain,\n    Auth0Config.options\n  );\n\n  login = () => {\n    if (!this.lock) {\n      return;\n    }\n    this.lock.show();\n  };\n  handleAuthentication = () => {\n    // Add callback Lock's `authenticated` event\n    this.lock.on('authenticated', this.setSession);\n    // Add callback for Lock's `authorization_error` event\n    this.lock.on('authorization_error', error =>\n      notification('error', 'Wrong mail or password')\n    );\n  };\n  setSession = authResult => {\n    // Set the time that the access token will expire at\n    let expiresAt = JSON.stringify(\n      authResult.expiresIn * 1000 + new Date().getTime()\n    );\n    localStorage.setItem('access_token', authResult.accessToken);\n    localStorage.setItem('id_token', authResult.idToken);\n    localStorage.setItem('expires_at', expiresAt);\n    // navigate to the dashboard route\n    history.replace('/dashboard');\n  };\n  logout = () => {\n    // Clear access token and ID token from local storage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('expires_at');\n    // navigate to the home route\n    history.replace('/');\n  };\n\n  isAuthenticated = () => {\n    let expiresAt = JSON.parse(localStorage.getItem('expiresAt'));\n    return new Date().getTime() < expiresAt;\n  };\n}\nexport default new Auth0();\n"]},"metadata":{},"sourceType":"module"}