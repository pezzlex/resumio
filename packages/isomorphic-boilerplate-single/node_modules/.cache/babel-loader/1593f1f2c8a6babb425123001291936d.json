{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar ATTACHMENT_CODE = 0xfffc; // 65532\n\nvar mapIndexed = R.addIndex(R.map);\nvar getGlyphs = R.propOr([], 'glyphs');\nvar getAttachment = R.pathOr({}, ['attributes', 'attachment']);\nvar isReplaceGlyph = R.o(R.includes(ATTACHMENT_CODE), R.propOr([], 'codePoints'));\n/**\n * Resolve attachments of run\n *\n * @param  {Object}  run\n * @return {Object} run\n */\n\nvar resolveRunAttachments = function resolveRunAttachments(run) {\n  var glyphs = getGlyphs(run);\n  var attachment = getAttachment(run);\n  var attachmentWidth = R.always(attachment.width);\n  return R.evolve({\n    positions: mapIndexed(function (position, i) {\n      var glyph = glyphs[i];\n\n      if (attachment && attachment.width && isReplaceGlyph(glyph)) {\n        return R.evolve({\n          xAdvance: attachmentWidth\n        }, position);\n      }\n\n      return R.clone(position);\n    })\n  })(run);\n};\n/**\n * Resolve attachments for multiple paragraphs\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings (paragraphs)\n * @return {Array} attributed strings (paragraphs)\n */\n\n\nvar resolveAttachments = function resolveAttachments() {\n  return R.evolve({\n    runs: R.map(resolveRunAttachments)\n  });\n};\n\nvar _default = resolveAttachments;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/pezannekhambatta/Desktop/resumio/node_modules/@react-pdf/textkit/layout/resolveAttachments.js"],"names":["_interopRequireWildcard","require","exports","__esModule","R","ATTACHMENT_CODE","mapIndexed","addIndex","map","getGlyphs","propOr","getAttachment","pathOr","isReplaceGlyph","o","includes","resolveRunAttachments","run","glyphs","attachment","attachmentWidth","always","width","evolve","positions","position","i","glyph","xAdvance","clone","resolveAttachments","runs","_default"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,CAAC,GAAGJ,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAII,eAAe,GAAG,MAAtB,C,CAA8B;;AAE9B,IAAIC,UAAU,GAAGF,CAAC,CAACG,QAAF,CAAWH,CAAC,CAACI,GAAb,CAAjB;AACA,IAAIC,SAAS,GAAGL,CAAC,CAACM,MAAF,CAAS,EAAT,EAAa,QAAb,CAAhB;AACA,IAAIC,aAAa,GAAGP,CAAC,CAACQ,MAAF,CAAS,EAAT,EAAa,CAAC,YAAD,EAAe,YAAf,CAAb,CAApB;AACA,IAAIC,cAAc,GAAGT,CAAC,CAACU,CAAF,CAAIV,CAAC,CAACW,QAAF,CAAWV,eAAX,CAAJ,EAAiCD,CAAC,CAACM,MAAF,CAAS,EAAT,EAAa,YAAb,CAAjC,CAArB;AACA;;;;;;;AAOA,IAAIM,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,GAA/B,EAAoC;AAC9D,MAAIC,MAAM,GAAGT,SAAS,CAACQ,GAAD,CAAtB;AACA,MAAIE,UAAU,GAAGR,aAAa,CAACM,GAAD,CAA9B;AACA,MAAIG,eAAe,GAAGhB,CAAC,CAACiB,MAAF,CAASF,UAAU,CAACG,KAApB,CAAtB;AACA,SAAOlB,CAAC,CAACmB,MAAF,CAAS;AACdC,IAAAA,SAAS,EAAElB,UAAU,CAAC,UAAUmB,QAAV,EAAoBC,CAApB,EAAuB;AAC3C,UAAIC,KAAK,GAAGT,MAAM,CAACQ,CAAD,CAAlB;;AAEA,UAAIP,UAAU,IAAIA,UAAU,CAACG,KAAzB,IAAkCT,cAAc,CAACc,KAAD,CAApD,EAA6D;AAC3D,eAAOvB,CAAC,CAACmB,MAAF,CAAS;AACdK,UAAAA,QAAQ,EAAER;AADI,SAAT,EAEJK,QAFI,CAAP;AAGD;;AAED,aAAOrB,CAAC,CAACyB,KAAF,CAAQJ,QAAR,CAAP;AACD,KAVoB;AADP,GAAT,EAYJR,GAZI,CAAP;AAaD,CAjBD;AAkBA;;;;;;;;;;AAUA,IAAIa,kBAAkB,GAAG,SAASA,kBAAT,GAA8B;AACrD,SAAO1B,CAAC,CAACmB,MAAF,CAAS;AACdQ,IAAAA,IAAI,EAAE3B,CAAC,CAACI,GAAF,CAAMQ,qBAAN;AADQ,GAAT,CAAP;AAGD,CAJD;;AAMA,IAAIgB,QAAQ,GAAGF,kBAAf;AACA5B,OAAO,CAAC,SAAD,CAAP,GAAqB8B,QAArB","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar ATTACHMENT_CODE = 0xfffc; // 65532\n\nvar mapIndexed = R.addIndex(R.map);\nvar getGlyphs = R.propOr([], 'glyphs');\nvar getAttachment = R.pathOr({}, ['attributes', 'attachment']);\nvar isReplaceGlyph = R.o(R.includes(ATTACHMENT_CODE), R.propOr([], 'codePoints'));\n/**\n * Resolve attachments of run\n *\n * @param  {Object}  run\n * @return {Object} run\n */\n\nvar resolveRunAttachments = function resolveRunAttachments(run) {\n  var glyphs = getGlyphs(run);\n  var attachment = getAttachment(run);\n  var attachmentWidth = R.always(attachment.width);\n  return R.evolve({\n    positions: mapIndexed(function (position, i) {\n      var glyph = glyphs[i];\n\n      if (attachment && attachment.width && isReplaceGlyph(glyph)) {\n        return R.evolve({\n          xAdvance: attachmentWidth\n        }, position);\n      }\n\n      return R.clone(position);\n    })\n  })(run);\n};\n/**\n * Resolve attachments for multiple paragraphs\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings (paragraphs)\n * @return {Array} attributed strings (paragraphs)\n */\n\n\nvar resolveAttachments = function resolveAttachments() {\n  return R.evolve({\n    runs: R.map(resolveRunAttachments)\n  });\n};\n\nvar _default = resolveAttachments;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}