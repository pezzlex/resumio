{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport { isPluralElement, isLiteralElement, isSelectElement } from './types';\nimport { pegParse } from './parser';\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\n * Whether to convert `#` in plural rule options\n * to `{var, number}`\n * @param el AST Element\n * @param pluralStack current plural stack\n */\n\nexport function normalizeHashtagInPlural(els) {\n  els.forEach(function (el) {\n    // If we're encountering a plural el\n    if (!isPluralElement(el) && !isSelectElement(el)) {\n      return;\n    } // Go down the options and search for # in any literal element\n\n\n    Object.keys(el.options).forEach(function (id) {\n      var _a;\n\n      var opt = el.options[id]; // If we got a match, we have to split this\n      // and inject a NumberElement in the middle\n\n      var matchingLiteralElIndex = -1;\n      var literalEl = undefined;\n\n      for (var i = 0; i < opt.value.length; i++) {\n        var el_1 = opt.value[i];\n\n        if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n          matchingLiteralElIndex = i;\n          literalEl = el_1;\n          break;\n        }\n      }\n\n      if (literalEl) {\n        var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n        var newEls = pegParse(newValue);\n\n        (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));\n      }\n\n      normalizeHashtagInPlural(opt.value);\n    });\n  });\n}","map":{"version":3,"sources":["../src/normalize.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,SAEE,eAFF,EAGE,gBAHF,EAKE,eALF,QAMO,SANP;AAOA,SAAQ,QAAR,QAAuB,UAAvB;AAEA,IAAM,oBAAoB,GAAG,aAA7B;AAEA;;;;;;;AAMA,OAAM,SAAU,wBAAV,CAAmC,GAAnC,EAA8D;AAClE,EAAA,GAAG,CAAC,OAAJ,CAAY,UAAA,EAAA,EAAE;AACZ;AACA,QAAI,CAAC,eAAe,CAAC,EAAD,CAAhB,IAAwB,CAAC,eAAe,CAAC,EAAD,CAA5C,EAAkD;AAChD;AACD,KAJW,CAKZ;;;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,EAAE,CAAC,OAAf,EAAwB,OAAxB,CAAgC,UAAA,EAAA,EAAE;;;AAChC,UAAM,GAAG,GAAG,EAAE,CAAC,OAAH,CAAW,EAAX,CAAZ,CADgC,CAEhC;AACA;;AACA,UAAI,sBAAsB,GAAG,CAAC,CAA9B;AACA,UAAI,SAAS,GAA+B,SAA5C;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,KAAJ,CAAU,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;AACzC,YAAM,IAAE,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAX;;AACA,YAAI,gBAAgB,CAAC,IAAD,CAAhB,IAAwB,oBAAoB,CAAC,IAArB,CAA0B,IAAE,CAAC,KAA7B,CAA5B,EAAiE;AAC/D,UAAA,sBAAsB,GAAG,CAAzB;AACA,UAAA,SAAS,GAAG,IAAZ;AACA;AACD;AACF;;AAED,UAAI,SAAJ,EAAe;AACb,YAAM,QAAQ,GAAG,SAAS,CAAC,KAAV,CAAgB,OAAhB,CACf,oBADe,EAEf,QAAM,EAAE,CAAC,KAAT,GAAc,WAFC,CAAjB;AAIA,YAAM,MAAM,GAAG,QAAQ,CAAC,QAAD,CAAvB;;AACA,SAAA,EAAA,GAAA,GAAG,CAAC,KAAJ,EAAU,MAAV,CAAgB,KAAhB,CAAgB,EAAhB,EAAgB,cAAA,CAAA,CAAC,sBAAD,EAAyB,CAAzB,CAAA,EAA+B,MAA/B,CAAhB;AACD;;AACD,MAAA,wBAAwB,CAAC,GAAG,CAAC,KAAL,CAAxB;AACD,KAxBD;AAyBD,GA/BD;AAgCD","sourceRoot":"","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { isPluralElement, isLiteralElement, isSelectElement, } from './types';\nimport { pegParse } from './parser';\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\n * Whether to convert `#` in plural rule options\n * to `{var, number}`\n * @param el AST Element\n * @param pluralStack current plural stack\n */\nexport function normalizeHashtagInPlural(els) {\n    els.forEach(function (el) {\n        // If we're encountering a plural el\n        if (!isPluralElement(el) && !isSelectElement(el)) {\n            return;\n        }\n        // Go down the options and search for # in any literal element\n        Object.keys(el.options).forEach(function (id) {\n            var _a;\n            var opt = el.options[id];\n            // If we got a match, we have to split this\n            // and inject a NumberElement in the middle\n            var matchingLiteralElIndex = -1;\n            var literalEl = undefined;\n            for (var i = 0; i < opt.value.length; i++) {\n                var el_1 = opt.value[i];\n                if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n                    matchingLiteralElIndex = i;\n                    literalEl = el_1;\n                    break;\n                }\n            }\n            if (literalEl) {\n                var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n                var newEls = pegParse(newValue);\n                (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));\n            }\n            normalizeHashtagInPlural(opt.value);\n        });\n    });\n}\n//# sourceMappingURL=normalize.js.map"]},"metadata":{},"sourceType":"module"}