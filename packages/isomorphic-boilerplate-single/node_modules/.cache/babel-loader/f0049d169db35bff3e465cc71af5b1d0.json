{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport * as React from 'react';\nimport { invariant } from '@formatjs/intl-utils';\nimport IntlMessageFormat from 'intl-messageformat';\nimport { MissingTranslationError, MessageFormatError } from '../error';\n\nfunction setTimeZoneInOptions(opts, timeZone) {\n  return Object.keys(opts).reduce(function (all, k) {\n    all[k] = __assign({\n      timeZone: timeZone\n    }, opts[k]);\n    return all;\n  }, {});\n}\n\nfunction deepMergeOptions(opts1, opts2) {\n  var keys = Object.keys(__assign(__assign({}, opts1), opts2));\n  return keys.reduce(function (all, k) {\n    all[k] = __assign(__assign({}, opts1[k] || {}), opts2[k] || {});\n    return all;\n  }, {});\n}\n\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n  if (!timeZone) {\n    return f1;\n  }\n\n  var mfFormats = IntlMessageFormat.formats;\n  return __assign(__assign(__assign({}, mfFormats), f1), {\n    date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)),\n    time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone))\n  });\n}\n\nfunction prepareIntlMessageFormatHtmlOutput(chunks, shouldWrap) {\n  return Array.isArray(chunks) && shouldWrap ? React.createElement.apply(React, __spreadArrays([React.Fragment, null], chunks)) : chunks;\n}\n\nexport function formatMessage(_a, state, messageDescriptor, values) {\n  var locale = _a.locale,\n      formats = _a.formats,\n      messages = _a.messages,\n      defaultLocale = _a.defaultLocale,\n      defaultFormats = _a.defaultFormats,\n      onError = _a.onError,\n      timeZone = _a.timeZone,\n      wrapRichTextChunksInFragment = _a.wrapRichTextChunksInFragment;\n\n  if (messageDescriptor === void 0) {\n    messageDescriptor = {\n      id: ''\n    };\n  }\n\n  var id = messageDescriptor.id,\n      defaultMessage = messageDescriptor.defaultMessage; // `id` is a required field of a Message Descriptor.\n\n  invariant(!!id, '[React Intl] An `id` must be provided to format a message.');\n  var message = messages && messages[String(id)]; // IMPORTANT: Hot path straight lookup for performance\n\n  if (!values && message && typeof message === 'string') {\n    return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\n  }\n\n  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n\n  if (!message) {\n    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {\n      // This prevents warnings from littering the console in development\n      // when no `messages` are passed into the <IntlProvider> for the\n      // default locale.\n      onError(new MissingTranslationError(messageDescriptor, locale));\n    }\n\n    if (defaultMessage) {\n      try {\n        var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n        return prepareIntlMessageFormatHtmlOutput(formatter.format(values), wrapRichTextChunksInFragment);\n      } catch (e) {\n        onError(new MessageFormatError(\"Error formatting default message for: \\\"\" + id + \"\\\", rendering default message verbatim\", locale, messageDescriptor, e));\n        return defaultMessage;\n      }\n    }\n\n    return id;\n  } // We have the translated message\n\n\n  try {\n    var formatter = state.getMessageFormat(message, locale, formats, {\n      formatters: state\n    });\n    return prepareIntlMessageFormatHtmlOutput(formatter.format(values), wrapRichTextChunksInFragment);\n  } catch (e) {\n    onError(new MessageFormatError(\"Error formatting message: \\\"\" + id + \"\\\", using \" + (defaultMessage ? 'default message' : 'id') + \" as fallback.\", locale, messageDescriptor, e));\n  }\n\n  if (defaultMessage) {\n    try {\n      var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n      return prepareIntlMessageFormatHtmlOutput(formatter.format(values), wrapRichTextChunksInFragment);\n    } catch (e) {\n      onError(new MessageFormatError(\"Error formatting the default message for: \\\"\" + id + \"\\\", rendering message verbatim\", locale, messageDescriptor, e));\n    }\n  }\n\n  return message || defaultMessage || id;\n}","map":{"version":3,"sources":["../../src/formatters/message.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport * as React from 'react';\nimport { invariant } from '@formatjs/intl-utils';\nimport IntlMessageFormat from 'intl-messageformat';\nimport { MissingTranslationError, MessageFormatError } from '../error';\nfunction setTimeZoneInOptions(opts, timeZone) {\n    return Object.keys(opts).reduce(function (all, k) {\n        all[k] = __assign({ timeZone: timeZone }, opts[k]);\n        return all;\n    }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n    var keys = Object.keys(__assign(__assign({}, opts1), opts2));\n    return keys.reduce(function (all, k) {\n        all[k] = __assign(__assign({}, (opts1[k] || {})), (opts2[k] || {}));\n        return all;\n    }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n    if (!timeZone) {\n        return f1;\n    }\n    var mfFormats = IntlMessageFormat.formats;\n    return __assign(__assign(__assign({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });\n}\nfunction prepareIntlMessageFormatHtmlOutput(chunks, shouldWrap) {\n    return Array.isArray(chunks) && shouldWrap\n        ? React.createElement.apply(React, __spreadArrays([React.Fragment, null], chunks)) : chunks;\n}\nexport function formatMessage(_a, state, messageDescriptor, values) {\n    var locale = _a.locale, formats = _a.formats, messages = _a.messages, defaultLocale = _a.defaultLocale, defaultFormats = _a.defaultFormats, onError = _a.onError, timeZone = _a.timeZone, wrapRichTextChunksInFragment = _a.wrapRichTextChunksInFragment;\n    if (messageDescriptor === void 0) { messageDescriptor = { id: '' }; }\n    var id = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;\n    // `id` is a required field of a Message Descriptor.\n    invariant(!!id, '[React Intl] An `id` must be provided to format a message.');\n    var message = messages && messages[String(id)];\n    // IMPORTANT: Hot path straight lookup for performance\n    if (!values && message && typeof message === 'string') {\n        return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\n    }\n    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n    if (!message) {\n        if (!defaultMessage ||\n            (locale && locale.toLowerCase() !== defaultLocale.toLowerCase())) {\n            // This prevents warnings from littering the console in development\n            // when no `messages` are passed into the <IntlProvider> for the\n            // default locale.\n            onError(new MissingTranslationError(messageDescriptor, locale));\n        }\n        if (defaultMessage) {\n            try {\n                var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n                return prepareIntlMessageFormatHtmlOutput(formatter.format(values), wrapRichTextChunksInFragment);\n            }\n            catch (e) {\n                onError(new MessageFormatError(\"Error formatting default message for: \\\"\" + id + \"\\\", rendering default message verbatim\", locale, messageDescriptor, e));\n                return defaultMessage;\n            }\n        }\n        return id;\n    }\n    // We have the translated message\n    try {\n        var formatter = state.getMessageFormat(message, locale, formats, {\n            formatters: state,\n        });\n        return prepareIntlMessageFormatHtmlOutput(formatter.format(values), wrapRichTextChunksInFragment);\n    }\n    catch (e) {\n        onError(new MessageFormatError(\"Error formatting message: \\\"\" + id + \"\\\", using \" + (defaultMessage ? 'default message' : 'id') + \" as fallback.\", locale, messageDescriptor, e));\n    }\n    if (defaultMessage) {\n        try {\n            var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n            return prepareIntlMessageFormatHtmlOutput(formatter.format(values), wrapRichTextChunksInFragment);\n        }\n        catch (e) {\n            onError(new MessageFormatError(\"Error formatting the default message for: \\\"\" + id + \"\\\", rendering message verbatim\", locale, messageDescriptor, e));\n        }\n    }\n    return message || defaultMessage || id;\n}\n//# sourceMappingURL=message.js.map"]},"metadata":{},"sourceType":"module"}