{"ast":null,"code":"import { filterProps } from '../utils';\nimport { FormatError } from 'intl-messageformat';\nimport { ReactIntlError } from '../error';\nvar DISPLAY_NAMES_OPTONS = ['localeMatcher', 'style', 'type', 'fallback'];\nexport function formatDisplayName(_a, getDisplayNames, value, options) {\n  var locale = _a.locale,\n      onError = _a.onError;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var DisplayNames = Intl.DisplayNames;\n\n  if (!DisplayNames) {\n    onError(new FormatError(\"Intl.DisplayNames is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-displaynames\\\"\\n\", \"MISSING_INTL_API\"\n    /* MISSING_INTL_API */\n    ));\n  }\n\n  var filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);\n\n  try {\n    return getDisplayNames(locale, filteredOptions).of(value);\n  } catch (e) {\n    onError(new ReactIntlError(\"FORMAT_ERROR\"\n    /* FORMAT_ERROR */\n    , 'Error formatting display name.', e));\n  }\n}","map":{"version":3,"sources":["../../src/formatters/displayName.ts"],"names":[],"mappings":"AACA,SAAQ,WAAR,QAA0B,UAA1B;AAKA,SAAQ,WAAR,QAAqC,oBAArC;AACA,SAA4B,cAA5B,QAAiD,UAAjD;AAEA,IAAM,oBAAoB,GAAqC,CAC7D,eAD6D,EAE7D,OAF6D,EAG7D,MAH6D,EAI7D,UAJ6D,CAA/D;AAOA,OAAM,SAAU,iBAAV,CACJ,EADI,EAEJ,eAFI,EAGJ,KAHI,EAIJ,OAJI,EAI4D;MAH/D,MAAA,GAAA,EAAA,CAAA,M;MAAQ,OAAA,GAAA,EAAA,CAAA,O;;AAGT,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAgE;;AAEhE,MAAM,YAAY,GAA6B,IAAY,CAAC,YAA5D;;AACA,MAAI,CAAC,YAAL,EAAmB;AACjB,IAAA,OAAO,CACL,IAAI,WAAJ,CACE,qHADF,EAGL;AAAA;AAHK,KADK,CAAP;AAQD;;AACD,MAAM,eAAe,GAAG,WAAW,CAAC,OAAD,EAAU,oBAAV,CAAnC;;AACA,MAAI;AACF,WAAO,eAAe,CAAC,MAAD,EAAS,eAAT,CAAf,CAAyC,EAAzC,CAA4C,KAA5C,CAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,IAAA,OAAO,CACL,IAAI,cAAJ,CAAkB;AAAA;AAAlB,MAEE,gCAFF,EAGE,CAHF,CADK,CAAP;AAOD;AACF","sourceRoot":"","sourcesContent":["import { filterProps } from '../utils';\nimport { FormatError } from 'intl-messageformat';\nimport { ReactIntlError } from '../error';\nvar DISPLAY_NAMES_OPTONS = [\n    'localeMatcher',\n    'style',\n    'type',\n    'fallback',\n];\nexport function formatDisplayName(_a, getDisplayNames, value, options) {\n    var locale = _a.locale, onError = _a.onError;\n    if (options === void 0) { options = {}; }\n    var DisplayNames = Intl.DisplayNames;\n    if (!DisplayNames) {\n        onError(new FormatError(\"Intl.DisplayNames is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-displaynames\\\"\\n\", \"MISSING_INTL_API\" /* MISSING_INTL_API */));\n    }\n    var filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);\n    try {\n        return getDisplayNames(locale, filteredOptions).of(value);\n    }\n    catch (e) {\n        onError(new ReactIntlError(\"FORMAT_ERROR\" /* FORMAT_ERROR */, 'Error formatting display name.', e));\n    }\n}\n//# sourceMappingURL=displayName.js.map"]},"metadata":{},"sourceType":"module"}