{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _filter = _interopRequireDefault(require(\"../run/filter\"));\n\nvar _advanceWidthBetween = _interopRequireDefault(require(\"../run/advanceWidthBetween\"));\n/**\n * Advance width between start and end\n * Does not consider ligature splitting for the moment.\n * Check performance impact on supporting this\n *\n * @param  {number}  start offset\n * @param  {number}  end offset\n * @param  {Object}  attributedString\n * @return {number} advance width\n */\n\n\nvar advanceWidthBetween = function advanceWidthBetween(start, end, string) {\n  return R.compose(R.sum, R.map((0, _advanceWidthBetween[\"default\"])(start, end)), (0, _filter[\"default\"])(start, end), R.propOr([], 'runs'))(string);\n};\n\nvar _default = R.curryN(3, advanceWidthBetween);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/pezannekhambatta/Desktop/resumio/node_modules/@react-pdf/textkit/attributedString/advanceWidthBetween.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","R","_filter","_advanceWidthBetween","advanceWidthBetween","start","end","string","compose","sum","map","propOr","_default","curryN"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,CAAC,GAAGH,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIK,OAAO,GAAGN,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAApC;;AAEA,IAAIM,oBAAoB,GAAGP,sBAAsB,CAACC,OAAO,CAAC,4BAAD,CAAR,CAAjD;AAEA;;;;;;;;;;;;AAUA,IAAIO,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,KAA7B,EAAoCC,GAApC,EAAyCC,MAAzC,EAAiD;AACzE,SAAON,CAAC,CAACO,OAAF,CAAUP,CAAC,CAACQ,GAAZ,EAAiBR,CAAC,CAACS,GAAF,CAAM,CAAC,GAAGP,oBAAoB,CAAC,SAAD,CAAxB,EAAqCE,KAArC,EAA4CC,GAA5C,CAAN,CAAjB,EAA0E,CAAC,GAAGJ,OAAO,CAAC,SAAD,CAAX,EAAwBG,KAAxB,EAA+BC,GAA/B,CAA1E,EAA+GL,CAAC,CAACU,MAAF,CAAS,EAAT,EAAa,MAAb,CAA/G,EAAqIJ,MAArI,CAAP;AACD,CAFD;;AAIA,IAAIK,QAAQ,GAAGX,CAAC,CAACY,MAAF,CAAS,CAAT,EAAYT,mBAAZ,CAAf;;AAEAL,OAAO,CAAC,SAAD,CAAP,GAAqBa,QAArB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _filter = _interopRequireDefault(require(\"../run/filter\"));\n\nvar _advanceWidthBetween = _interopRequireDefault(require(\"../run/advanceWidthBetween\"));\n\n/**\n * Advance width between start and end\n * Does not consider ligature splitting for the moment.\n * Check performance impact on supporting this\n *\n * @param  {number}  start offset\n * @param  {number}  end offset\n * @param  {Object}  attributedString\n * @return {number} advance width\n */\nvar advanceWidthBetween = function advanceWidthBetween(start, end, string) {\n  return R.compose(R.sum, R.map((0, _advanceWidthBetween[\"default\"])(start, end)), (0, _filter[\"default\"])(start, end), R.propOr([], 'runs'))(string);\n};\n\nvar _default = R.curryN(3, advanceWidthBetween);\n\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}