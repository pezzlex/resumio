{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\n\n\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\n\nexport function parseDateTimeSkeleton(skeleton) {\n  var result = {};\n  skeleton.replace(DATE_TIME_REGEX, function (match) {\n    var len = match.length;\n\n    switch (match[0]) {\n      // Era\n      case 'G':\n        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      // Year\n\n      case 'y':\n        result.year = len === 2 ? '2-digit' : 'numeric';\n        break;\n\n      case 'Y':\n      case 'u':\n      case 'U':\n      case 'r':\n        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n      // Quarter\n\n      case 'q':\n      case 'Q':\n        throw new RangeError('`q/Q` (quarter) patterns are not supported');\n      // Month\n\n      case 'M':\n      case 'L':\n        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n        break;\n      // Week\n\n      case 'w':\n      case 'W':\n        throw new RangeError('`w/W` (week) patterns are not supported');\n\n      case 'd':\n        result.day = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'D':\n      case 'F':\n      case 'g':\n        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n      // Weekday\n\n      case 'E':\n        result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\n        break;\n\n      case 'e':\n        if (len < 4) {\n          throw new RangeError('`e..eee` (weekday) patterns are not supported');\n        }\n\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n\n      case 'c':\n        if (len < 4) {\n          throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n        }\n\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      // Period\n\n      case 'a':\n        // AM, PM\n        result.hour12 = true;\n        break;\n\n      case 'b': // am, pm, noon, midnight\n\n      case 'B':\n        // flexible day periods\n        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n      // Hour\n\n      case 'h':\n        result.hourCycle = 'h12';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'H':\n        result.hourCycle = 'h23';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'K':\n        result.hourCycle = 'h11';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'k':\n        result.hourCycle = 'h24';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'j':\n      case 'J':\n      case 'C':\n        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n      // Minute\n\n      case 'm':\n        result.minute = ['numeric', '2-digit'][len - 1];\n        break;\n      // Second\n\n      case 's':\n        result.second = ['numeric', '2-digit'][len - 1];\n        break;\n\n      case 'S':\n      case 'A':\n        throw new RangeError('`S/A` (second) pattenrs are not supported, use `s` instead');\n      // Zone\n\n      case 'z':\n        // 1..3, 4: specific non-location format\n        result.timeZoneName = len < 4 ? 'short' : 'long';\n        break;\n\n      case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n\n      case 'O': // 1, 4: miliseconds in day short, long\n\n      case 'v': // 1, 4: generic non-location format\n\n      case 'V': // 1, 2, 3, 4: time zone ID or city\n\n      case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n\n      case 'x':\n        // 1, 2, 3, 4: The ISO8601 varios formats\n        throw new RangeError('`Z/O/v/V/X/x` (timeZone) pattenrs are not supported, use `z` instead');\n    }\n\n    return '';\n  });\n  return result;\n}\n\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\n\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\n\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    } // @@@+ case\n    else if (g2 === '+') {\n        result.minimumSignificantDigits = g1.length;\n      } // .### case\n      else if (g1[0] === '#') {\n          result.maximumSignificantDigits = g1.length;\n        } // .@@## or .@@@ case\n        else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n          }\n\n    return '';\n  });\n  return result;\n}\n\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n\n    case 'sign-accounting':\n      return {\n        currencySign: 'accounting'\n      };\n\n    case 'sign-always':\n      return {\n        signDisplay: 'always'\n      };\n\n    case 'sign-accounting-always':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n\n    case 'sign-except-zero':\n      return {\n        signDisplay: 'exceptZero'\n      };\n\n    case 'sign-accounting-except-zero':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n\n    case 'sign-never':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\n\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n\n  if (signOpts) {\n    return signOpts;\n  }\n\n  return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\n\n\nexport function convertNumberSkeletonToNumberFormatOptions(tokens) {\n  var result = {};\n\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n\n    switch (token.stem) {\n      case 'percent':\n        result.style = 'percent';\n        continue;\n\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n\n      case 'group-off':\n        result.useGrouping = false;\n        continue;\n\n      case 'precision-integer':\n      case '.':\n        result.maximumFractionDigits = 0;\n        continue;\n\n      case 'measure-unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n\n      case 'compact-short':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n\n      case 'compact-long':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n\n      case 'scientific':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n\n      case 'engineering':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n    } // Precision\n    // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision\n    // precision-integer case\n\n\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (match, g1, g2, g3, g4, g5) {\n        // .000* case (before ICU67 it was .000+)\n        if (g2 === '*') {\n          result.minimumFractionDigits = g1.length;\n        } // .### case\n        else if (g3 && g3[0] === '#') {\n            result.maximumFractionDigits = g3.length;\n          } // .00## case\n          else if (g4 && g5) {\n              result.minimumFractionDigits = g4.length;\n              result.maximumFractionDigits = g4.length + g5.length;\n            } else {\n              result.minimumFractionDigits = g1.length;\n              result.maximumFractionDigits = g1.length;\n            }\n\n        return '';\n      });\n\n      if (token.options.length) {\n        result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));\n      }\n\n      continue;\n    }\n\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n\n    var signOpts = parseSign(token.stem);\n\n    if (signOpts) {\n      result = __assign(__assign({}, result), signOpts);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../src/skeleton.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nexport function parseDateTimeSkeleton(skeleton) {\n    var result = {};\n    skeleton.replace(DATE_TIME_REGEX, function (match) {\n        var len = match.length;\n        switch (match[0]) {\n            // Era\n            case 'G':\n                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n                break;\n            // Year\n            case 'y':\n                result.year = len === 2 ? '2-digit' : 'numeric';\n                break;\n            case 'Y':\n            case 'u':\n            case 'U':\n            case 'r':\n                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n            // Quarter\n            case 'q':\n            case 'Q':\n                throw new RangeError('`q/Q` (quarter) patterns are not supported');\n            // Month\n            case 'M':\n            case 'L':\n                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n                break;\n            // Week\n            case 'w':\n            case 'W':\n                throw new RangeError('`w/W` (week) patterns are not supported');\n            case 'd':\n                result.day = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'D':\n            case 'F':\n            case 'g':\n                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n            // Weekday\n            case 'E':\n                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\n                break;\n            case 'e':\n                if (len < 4) {\n                    throw new RangeError('`e..eee` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            case 'c':\n                if (len < 4) {\n                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            // Period\n            case 'a': // AM, PM\n                result.hour12 = true;\n                break;\n            case 'b': // am, pm, noon, midnight\n            case 'B': // flexible day periods\n                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n            // Hour\n            case 'h':\n                result.hourCycle = 'h12';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'H':\n                result.hourCycle = 'h23';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'K':\n                result.hourCycle = 'h11';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'k':\n                result.hourCycle = 'h24';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'j':\n            case 'J':\n            case 'C':\n                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n            // Minute\n            case 'm':\n                result.minute = ['numeric', '2-digit'][len - 1];\n                break;\n            // Second\n            case 's':\n                result.second = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'S':\n            case 'A':\n                throw new RangeError('`S/A` (second) pattenrs are not supported, use `s` instead');\n            // Zone\n            case 'z': // 1..3, 4: specific non-location format\n                result.timeZoneName = len < 4 ? 'short' : 'long';\n                break;\n            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n            case 'O': // 1, 4: miliseconds in day short, long\n            case 'v': // 1, 4: generic non-location format\n            case 'V': // 1, 2, 3, 4: time zone ID or city\n            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats\n                throw new RangeError('`Z/O/v/V/X/x` (timeZone) pattenrs are not supported, use `z` instead');\n        }\n        return '';\n    });\n    return result;\n}\nfunction icuUnitToEcma(unit) {\n    return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\nfunction parseSignificantPrecision(str) {\n    var result = {};\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n        // @@@ case\n        if (typeof g2 !== 'string') {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length;\n        }\n        // @@@+ case\n        else if (g2 === '+') {\n            result.minimumSignificantDigits = g1.length;\n        }\n        // .### case\n        else if (g1[0] === '#') {\n            result.maximumSignificantDigits = g1.length;\n        }\n        // .@@## or .@@@ case\n        else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits =\n                g1.length + (typeof g2 === 'string' ? g2.length : 0);\n        }\n        return '';\n    });\n    return result;\n}\nfunction parseSign(str) {\n    switch (str) {\n        case 'sign-auto':\n            return {\n                signDisplay: 'auto',\n            };\n        case 'sign-accounting':\n            return {\n                currencySign: 'accounting',\n            };\n        case 'sign-always':\n            return {\n                signDisplay: 'always',\n            };\n        case 'sign-accounting-always':\n            return {\n                signDisplay: 'always',\n                currencySign: 'accounting',\n            };\n        case 'sign-except-zero':\n            return {\n                signDisplay: 'exceptZero',\n            };\n        case 'sign-accounting-except-zero':\n            return {\n                signDisplay: 'exceptZero',\n                currencySign: 'accounting',\n            };\n        case 'sign-never':\n            return {\n                signDisplay: 'never',\n            };\n    }\n}\nfunction parseNotationOptions(opt) {\n    var result = {};\n    var signOpts = parseSign(opt);\n    if (signOpts) {\n        return signOpts;\n    }\n    return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nexport function convertNumberSkeletonToNumberFormatOptions(tokens) {\n    var result = {};\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        switch (token.stem) {\n            case 'percent':\n                result.style = 'percent';\n                continue;\n            case 'currency':\n                result.style = 'currency';\n                result.currency = token.options[0];\n                continue;\n            case 'group-off':\n                result.useGrouping = false;\n                continue;\n            case 'precision-integer':\n            case '.':\n                result.maximumFractionDigits = 0;\n                continue;\n            case 'measure-unit':\n                result.style = 'unit';\n                result.unit = icuUnitToEcma(token.options[0]);\n                continue;\n            case 'compact-short':\n                result.notation = 'compact';\n                result.compactDisplay = 'short';\n                continue;\n            case 'compact-long':\n                result.notation = 'compact';\n                result.compactDisplay = 'long';\n                continue;\n            case 'scientific':\n                result = __assign(__assign(__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'engineering':\n                result = __assign(__assign(__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'notation-simple':\n                result.notation = 'standard';\n                continue;\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n            case 'unit-width-narrow':\n                result.currencyDisplay = 'narrowSymbol';\n                result.unitDisplay = 'narrow';\n                continue;\n            case 'unit-width-short':\n                result.currencyDisplay = 'code';\n                result.unitDisplay = 'short';\n                continue;\n            case 'unit-width-full-name':\n                result.currencyDisplay = 'name';\n                result.unitDisplay = 'long';\n                continue;\n            case 'unit-width-iso-code':\n                result.currencyDisplay = 'symbol';\n                continue;\n        }\n        // Precision\n        // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision\n        // precision-integer case\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n            if (token.options.length > 1) {\n                throw new RangeError('Fraction-precision stems only accept a single optional option');\n            }\n            token.stem.replace(FRACTION_PRECISION_REGEX, function (match, g1, g2, g3, g4, g5) {\n                // .000* case (before ICU67 it was .000+)\n                if (g2 === '*') {\n                    result.minimumFractionDigits = g1.length;\n                }\n                // .### case\n                else if (g3 && g3[0] === '#') {\n                    result.maximumFractionDigits = g3.length;\n                }\n                // .00## case\n                else if (g4 && g5) {\n                    result.minimumFractionDigits = g4.length;\n                    result.maximumFractionDigits = g4.length + g5.length;\n                }\n                else {\n                    result.minimumFractionDigits = g1.length;\n                    result.maximumFractionDigits = g1.length;\n                }\n                return '';\n            });\n            if (token.options.length) {\n                result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));\n            }\n            continue;\n        }\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n            result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n            continue;\n        }\n        var signOpts = parseSign(token.stem);\n        if (signOpts) {\n            result = __assign(__assign({}, result), signOpts);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=skeleton.js.map"]},"metadata":{},"sourceType":"module"}