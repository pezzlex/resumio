{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n/**\n * Prepend glyph indices with given length\n *\n * Ex. prepend(3, [0, 1, 2, 2]) => [0, 0, 0, 1, 2, 3, 3]\n *\n * @param  {number}  length\n * @param  {Array}  glyph indices\n * @return {Array}  extended glyph indices\n */\n\n\nvar prepend = function prepend(length, indices) {\n  if (length === 0) return indices;\n  return R.converge(R.concat, [R.converge(R.repeat, [R.always(0), R.always(length)]), R.map(R.inc)])(indices);\n};\n\nvar _default = R.curryN(2, prepend);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/pezannekhambatta/Desktop/resumio/node_modules/@react-pdf/textkit/indices/prepend.js"],"names":["_interopRequireWildcard","require","exports","__esModule","R","prepend","length","indices","converge","concat","repeat","always","map","inc","_default","curryN"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,CAAC,GAAGJ,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAA/B;AAEA;;;;;;;;;;;AASA,IAAII,OAAO,GAAG,SAASA,OAAT,CAAiBC,MAAjB,EAAyBC,OAAzB,EAAkC;AAC9C,MAAID,MAAM,KAAK,CAAf,EAAkB,OAAOC,OAAP;AAClB,SAAOH,CAAC,CAACI,QAAF,CAAWJ,CAAC,CAACK,MAAb,EAAqB,CAACL,CAAC,CAACI,QAAF,CAAWJ,CAAC,CAACM,MAAb,EAAqB,CAACN,CAAC,CAACO,MAAF,CAAS,CAAT,CAAD,EAAcP,CAAC,CAACO,MAAF,CAASL,MAAT,CAAd,CAArB,CAAD,EAAwDF,CAAC,CAACQ,GAAF,CAAMR,CAAC,CAACS,GAAR,CAAxD,CAArB,EAA4FN,OAA5F,CAAP;AACD,CAHD;;AAKA,IAAIO,QAAQ,GAAGV,CAAC,CAACW,MAAF,CAAS,CAAT,EAAYV,OAAZ,CAAf;;AAEAH,OAAO,CAAC,SAAD,CAAP,GAAqBY,QAArB","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\n/**\n * Prepend glyph indices with given length\n *\n * Ex. prepend(3, [0, 1, 2, 2]) => [0, 0, 0, 1, 2, 3, 3]\n *\n * @param  {number}  length\n * @param  {Array}  glyph indices\n * @return {Array}  extended glyph indices\n */\nvar prepend = function prepend(length, indices) {\n  if (length === 0) return indices;\n  return R.converge(R.concat, [R.converge(R.repeat, [R.always(0), R.always(length)]), R.map(R.inc)])(indices);\n};\n\nvar _default = R.curryN(2, prepend);\n\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}