{"ast":null,"code":"var Query = require('./queries');\n\nvar Operator = require('./operators');\n\nvar NUMBERS = /[0-9]/;\nvar LETTERS = /[a-z|\\-]/i;\nvar WHITESPACE = /\\s/;\nvar COLON = /:/;\nvar COMMA = /,/;\nvar AND = /and$/;\nvar AT = /@/;\n\nfunction tokenizer(input) {\n  var current = 0;\n  var tokens = [];\n\n  while (current < input.length) {\n    var char = input[current];\n\n    if (AT.test(char)) {\n      char = input[++current];\n\n      while (LETTERS.test(char) && char !== undefined) {\n        char = input[++current];\n      }\n    }\n\n    if (WHITESPACE.test(char) || char === ')' || char === '(') {\n      current++;\n      continue;\n    }\n\n    if (COLON.test(char) || COMMA.test(char)) {\n      current++;\n      tokens.push({\n        type: 'operator',\n        value: char\n      });\n      continue;\n    }\n\n    if (NUMBERS.test(char)) {\n      var value = '';\n\n      while (NUMBERS.test(char)) {\n        value += char;\n        char = input[++current];\n      }\n\n      tokens.push({\n        type: 'number',\n        value: value\n      });\n      continue;\n    }\n\n    if (LETTERS.test(char)) {\n      var value = '';\n\n      while (LETTERS.test(char) && char !== undefined) {\n        value += char;\n        char = input[++current];\n      }\n\n      if (AND.test(value)) {\n        tokens.push({\n          type: 'operator',\n          value: value\n        });\n      } else {\n        tokens.push({\n          type: 'literal',\n          value: value\n        });\n      }\n\n      continue;\n    }\n\n    throw new TypeError('Tokenizer: I dont know what this character is: ' + char);\n  }\n\n  return tokens;\n}\n\nfunction parser(tokens) {\n  var output = [];\n  var stack = [];\n\n  while (tokens.length > 0) {\n    var token = tokens.shift();\n\n    if (token.type === 'number' || token.type === 'literal') {\n      output.push(token);\n      continue;\n    }\n\n    if (token.type === 'operator') {\n      if (COLON.test(token.value)) {\n        token = {\n          type: 'query',\n          key: output.pop(),\n          value: tokens.shift()\n        };\n        output.push(token);\n        continue;\n      }\n\n      while (stack.length > 0) {\n        output.unshift(stack.pop());\n      }\n\n      stack.push(token);\n    }\n  }\n\n  while (stack.length > 0) {\n    output.unshift(stack.pop());\n  }\n\n  function walk() {\n    var head = output.shift();\n\n    if (head.type === 'number') {\n      return parseInt(head.value);\n    }\n\n    if (head.type === 'literal') {\n      return head.value;\n    }\n\n    if (head.type === 'operator') {\n      var l = walk();\n      var r = walk();\n      return Operator(head.value, l, r);\n    }\n\n    if (head.type === 'query') {\n      var l = head.key.value;\n      var r = head.value.value;\n      return Query(l, r);\n    }\n  }\n\n  return walk();\n}\n\nmodule.exports = {\n  parse: function parse(query) {\n    var tokens = tokenizer(query);\n    var ast = parser(tokens);\n    return ast;\n  }\n};","map":{"version":3,"sources":["/Users/pezannekhambatta/Desktop/resumio/node_modules/media-engine/src/parser.js"],"names":["Query","require","Operator","NUMBERS","LETTERS","WHITESPACE","COLON","COMMA","AND","AT","tokenizer","input","current","tokens","length","char","test","undefined","push","type","value","TypeError","parser","output","stack","token","shift","key","pop","unshift","walk","head","parseInt","l","r","module","exports","parse","query","ast"],"mappings":"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","sourcesContent":["var Query = require('./queries');\nvar Operator = require('./operators');\n\nvar NUMBERS = /[0-9]/;\nvar LETTERS = /[a-z|\\-]/i;\nvar WHITESPACE = /\\s/;\nvar COLON = /:/;\nvar COMMA = /,/;\nvar AND = /and$/;\nvar AT = /@/;\n\nfunction tokenizer(input) {\n  var current = 0;\n  var tokens = [];\n\n  while (current < input.length) {\n    var char = input[current];\n\n    if (AT.test(char)) {\n      char = input[++current];\n      while (LETTERS.test(char) && char !== undefined) {\n        char = input[++current];\n      }\n    }\n\n    if (WHITESPACE.test(char) || char === ')' || char === '(') {\n      current++;\n      continue;\n    }\n\n    if (COLON.test(char) || COMMA.test(char)) {\n      current++;\n      tokens.push({ type: 'operator', value: char });\n      continue;\n    }\n\n    if (NUMBERS.test(char)) {\n      var value = '';\n      while (NUMBERS.test(char)) {\n        value += char;\n        char = input[++current];\n      }\n\n      tokens.push({ type: 'number', value: value });\n      continue;\n    }\n\n    if (LETTERS.test(char)) {\n      var value = '';\n      while (LETTERS.test(char) && char !== undefined) {\n        value += char;\n        char = input[++current];\n      }\n      if (AND.test(value)) {\n        tokens.push({ type: 'operator', value: value });\n      } else {\n        tokens.push({ type: 'literal', value: value });\n      }\n\n      continue;\n    }\n\n    throw new TypeError(\n      'Tokenizer: I dont know what this character is: ' + char\n    );\n  }\n\n  return tokens;\n}\n\nfunction parser(tokens) {\n  var output = [];\n  var stack = [];\n\n  while (tokens.length > 0) {\n    var token = tokens.shift();\n\n    if (token.type === 'number' || token.type === 'literal') {\n      output.push(token);\n      continue;\n    }\n\n    if (token.type === 'operator') {\n      if (COLON.test(token.value)) {\n        token = { type: 'query', key: output.pop(), value: tokens.shift() };\n        output.push(token);\n        continue;\n      }\n\n      while (stack.length > 0) {\n        output.unshift(stack.pop());\n      }\n      stack.push(token);\n    }\n  }\n\n  while (stack.length > 0) {\n    output.unshift(stack.pop());\n  }\n\n  function walk() {\n    var head = output.shift();\n\n    if (head.type === 'number') {\n      return parseInt(head.value);\n    }\n\n    if (head.type === 'literal') {\n      return head.value;\n    }\n\n    if (head.type === 'operator') {\n      var l = walk();\n      var r = walk();\n\n      return Operator(head.value, l, r);\n    }\n\n    if (head.type === 'query') {\n      var l = head.key.value;\n      var r = head.value.value;\n\n      return Query(l, r);\n    }\n  }\n\n  return walk();\n}\n\nmodule.exports = {\n  parse: function(query) {\n    var tokens = tokenizer(query);\n    var ast = parser(tokens);\n    return ast;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}