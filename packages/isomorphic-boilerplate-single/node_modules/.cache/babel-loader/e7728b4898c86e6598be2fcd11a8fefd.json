{"ast":null,"code":"import \"antd/es/button/style/css\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/input/style/css\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/notification/style/css\";\nimport _notification from \"antd/es/notification\";\nimport \"antd/es/form/style/css\";\nimport _Form from \"antd/es/form\";\nimport _slicedToArray from \"/Users/pezannekhambatta/Desktop/resumio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pezannekhambatta/Desktop/resumio/packages/isomorphic-boilerplate-single/src/containers/Pages/ResetPassword/ResetPassword.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, Redirect, useHistory, useLocation, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'; // import Input from '@iso/components/uielements/input'\n// import Button from '@iso/components/uielements/button'\n\nimport ResetPasswordStyleWrapper from './ResetPassword.styles';\nimport { clearStatus, resetPassword, verifyValidLink } from '../../../redux/auth/actions';\nimport { LockOutlined } from '@ant-design/icons';\nimport Loader from '@iso/components/utility/loader';\n\nconst ResetPassword = () => {\n  const _Form$useForm = _Form.useForm(),\n        _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n        form = _Form$useForm2[0];\n\n  const _useParams = useParams(),\n        userId = _useParams.userId,\n        token = _useParams.token;\n\n  console.log(userId);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        redirectToReferrer = _useState2[0],\n        setRedirectToReferrer = _useState2[1];\n\n  const dispatch = useDispatch();\n  const isSignedIn = useSelector(state => state.Auth.token);\n  const isValidLink = useSelector(state => state.Auth.isValidLink);\n\n  const _useSelector = useSelector(state => state.Auth),\n        success = _useSelector.success,\n        error = _useSelector.error;\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setLoading = _useState4[1];\n\n  useEffect(() => {\n    dispatch(verifyValidLink({\n      userId,\n      token\n    }));\n  }, []);\n  useEffect(() => {\n    if (isSignedIn) {\n      setRedirectToReferrer(true);\n    }\n  }, [isSignedIn]);\n  useEffect(() => {\n    dispatch(clearStatus());\n    setLoading(false);\n  }, [success, error]);\n  useEffect(() => {\n    if (isSignedIn) {\n      setRedirectToReferrer(true);\n    }\n  }, [isSignedIn]);\n  useEffect(() => {\n    // message.error(error)\n    if (error) {\n      _notification['error']({\n        message: 'Error',\n        description: error\n      });\n    }\n  }, [error]);\n  useEffect(() => {\n    // message.success(success)\n    if (success) {\n      console.log('SUCCESS FOUND!');\n\n      _notification['success']({\n        message: 'Success',\n        description: success\n      });\n    }\n  }, [success]);\n  let location = useLocation();\n\n  let _ref = location.state || {\n    from: {\n      pathname: '/dashboard'\n    }\n  },\n      from = _ref.from;\n\n  if (redirectToReferrer) {\n    console.log('redirectToReferrer', redirectToReferrer);\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: from,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const onFinish = ({\n    password\n  }) => {\n    dispatch(resetPassword({\n      userId,\n      password,\n      token\n    }));\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return /*#__PURE__*/React.createElement(ResetPasswordStyleWrapper, {\n    className: \"isoResetPassPage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"isoFormContentWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"isoFormContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"isoLogoWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, \"Resumio\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"isoFormHeadText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Reset Password\"), isValidLink ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }, \"Enter new password and confirm it.\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, \"The reset password link is invalid or has expired.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"isoResetPassForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, isValidLink && /*#__PURE__*/React.createElement(_Form, {\n    form: form,\n    layout: \"vertical\",\n    initialValues: {\n      remember: true\n    },\n    onFinish: onFinish,\n    onFinishFailed: onFinishFailed,\n    scrollToFirstError: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"isoInputWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(_Form.Item, {\n    label: \"New Password\",\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: 'Please input your new password!'\n    }, {\n      min: 6,\n      message: 'Password must be minimum 6 characters.'\n    }],\n    hasFeedback: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(_Input.Password, {\n    prefix: /*#__PURE__*/React.createElement(LockOutlined, {\n      className: \"site-form-item-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 31\n      }\n    }),\n    placeholder: \"New Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"isoInputWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(_Form.Item, {\n    name: \"confirm\",\n    label: \"Confirm Password\",\n    dependencies: ['password'],\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue('password') === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject('The two passwords that you entered do not match!');\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(_Input.Password, {\n    prefix: /*#__PURE__*/React.createElement(LockOutlined, {\n      className: \"site-form-item-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 31\n      }\n    }),\n    placeholder: \"Confirm Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"isoInputWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(_Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }, \"Save\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"isoCenterComponent isoHelperWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, \"Return to Sign In\")))));\n};\n\nexport default ResetPassword;","map":{"version":3,"sources":["/Users/pezannekhambatta/Desktop/resumio/packages/isomorphic-boilerplate-single/src/containers/Pages/ResetPassword/ResetPassword.js"],"names":["React","useState","useEffect","Link","Redirect","useHistory","useLocation","useParams","useSelector","useDispatch","ResetPasswordStyleWrapper","clearStatus","resetPassword","verifyValidLink","LockOutlined","Loader","ResetPassword","useForm","form","userId","token","console","log","redirectToReferrer","setRedirectToReferrer","dispatch","isSignedIn","state","Auth","isValidLink","success","error","isLoading","setLoading","message","description","location","from","pathname","onFinish","password","onFinishFailed","errorInfo","remember","required","min","getFieldValue","validator","rule","value","Promise","resolve","reject"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Link,\n  Redirect,\n  useHistory,\n  useLocation,\n  useParams,\n} from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\n// import Input from '@iso/components/uielements/input'\n// import Button from '@iso/components/uielements/button'\nimport ResetPasswordStyleWrapper from './ResetPassword.styles'\nimport {\n  clearStatus,\n  resetPassword,\n  verifyValidLink,\n} from '../../../redux/auth/actions'\nimport { notification, Form, Button, Input } from 'antd'\nimport { LockOutlined } from '@ant-design/icons'\nimport Loader from '@iso/components/utility/loader'\n\nconst ResetPassword = () => {\n  const [form] = Form.useForm()\n  const { userId, token } = useParams()\n  console.log(userId)\n\n  const [redirectToReferrer, setRedirectToReferrer] = useState(false)\n  const dispatch = useDispatch()\n  const isSignedIn = useSelector((state) => state.Auth.token)\n  const isValidLink = useSelector((state) => state.Auth.isValidLink)\n\n  const { success, error } = useSelector((state) => state.Auth)\n  const [isLoading, setLoading] = useState(false)\n\n  useEffect(() => {\n    dispatch(verifyValidLink({ userId, token }))\n  }, [])\n\n  useEffect(() => {\n    if (isSignedIn) {\n      setRedirectToReferrer(true)\n    }\n  }, [isSignedIn])\n\n  useEffect(() => {\n    dispatch(clearStatus())\n    setLoading(false)\n  }, [success, error])\n\n  useEffect(() => {\n    if (isSignedIn) {\n      setRedirectToReferrer(true)\n    }\n  }, [isSignedIn])\n\n  useEffect(() => {\n    // message.error(error)\n    if (error) {\n      notification['error']({\n        message: 'Error',\n        description: error,\n      })\n    }\n  }, [error])\n  useEffect(() => {\n    // message.success(success)\n    if (success) {\n      console.log('SUCCESS FOUND!')\n      notification['success']({\n        message: 'Success',\n        description: success,\n      })\n    }\n  }, [success])\n\n  let location = useLocation()\n  let { from } = location.state || { from: { pathname: '/dashboard' } }\n\n  if (redirectToReferrer) {\n    console.log('redirectToReferrer', redirectToReferrer)\n    return <Redirect to={from} />\n  }\n\n  const onFinish = ({ password }) => {\n    dispatch(resetPassword({ userId, password, token }))\n  }\n\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo)\n  }\n\n  return (\n    <ResetPasswordStyleWrapper className=\"isoResetPassPage\">\n      <div className=\"isoFormContentWrapper\">\n        <div className=\"isoFormContent\">\n          <div className=\"isoLogoWrapper\">\n            <Link to=\"/dashboard\">Resumio</Link>\n          </div>\n\n          <div className=\"isoFormHeadText\">\n            <h3>Reset Password</h3>\n            {isValidLink ? (\n              <p>Enter new password and confirm it.</p>\n            ) : (\n              <p>The reset password link is invalid or has expired.</p>\n            )}\n          </div>\n\n          <div className=\"isoResetPassForm\">\n            {isValidLink && (\n              <Form\n                form={form}\n                layout=\"vertical\"\n                initialValues={{\n                  remember: true,\n                }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                scrollToFirstError\n              >\n                <div className=\"isoInputWrapper\">\n                  <Form.Item\n                    label=\"New Password\"\n                    name=\"password\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please input your new password!',\n                      },\n                      {\n                        min: 6,\n                        message: 'Password must be minimum 6 characters.',\n                      },\n                    ]}\n                    hasFeedback\n                  >\n                    <Input.Password\n                      prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                      placeholder=\"New Password\"\n                    />\n                  </Form.Item>\n                </div>\n                <div className=\"isoInputWrapper\">\n                  <Form.Item\n                    name=\"confirm\"\n                    label=\"Confirm Password\"\n                    dependencies={['password']}\n                    hasFeedback\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please confirm your password!',\n                      },\n                      ({ getFieldValue }) => ({\n                        validator(rule, value) {\n                          if (!value || getFieldValue('password') === value) {\n                            return Promise.resolve()\n                          }\n                          return Promise.reject(\n                            'The two passwords that you entered do not match!'\n                          )\n                        },\n                      }),\n                    ]}\n                  >\n                    <Input.Password\n                      prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                      placeholder=\"Confirm Password\"\n                    />\n                  </Form.Item>\n                </div>\n\n                <div className=\"isoInputWrapper\">\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Save\n                  </Button>\n                </div>\n              </Form>\n            )}\n          </div>\n          <div className=\"isoCenterComponent isoHelperWrapper\">\n            <Link to=\"/\">Return to Sign In</Link>\n          </div>\n        </div>\n      </div>\n    </ResetPasswordStyleWrapper>\n  )\n}\n\nexport default ResetPassword\n"]},"metadata":{},"sourceType":"module"}