{"ast":null,"code":"// tslint:disable:only-arrow-functions\n// tslint:disable:object-literal-shorthand\n// tslint:disable:trailing-comma\n// tslint:disable:object-literal-sort-keys\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:max-line-length\n// tslint:disable:no-consecutive-blank-lines\n// tslint:disable:align\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )\n//\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\n\n\nimport { TYPE } from './types';\n\nvar SyntaxError =\n/** @class */\nfunction (_super) {\n  __extends(SyntaxError, _super);\n\n  function SyntaxError(message, expected, found, location) {\n    var _this = _super.call(this) || this;\n\n    _this.message = message;\n    _this.expected = expected;\n    _this.found = found;\n    _this.location = location;\n    _this.name = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(_this, SyntaxError);\n    }\n\n    return _this;\n  }\n\n  SyntaxError.buildMessage = function (expected, found) {\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n        return \"\\\\x0\" + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return \"\\\\x\" + hex(ch);\n      });\n    }\n\n    function classEscape(s) {\n      return s.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function (ch) {\n        return \"\\\\x0\" + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return \"\\\\x\" + hex(ch);\n      });\n    }\n\n    function describeExpectation(expectation) {\n      switch (expectation.type) {\n        case \"literal\":\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n\n        case \"class\":\n          var escapedParts = expectation.parts.map(function (part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n\n        case \"any\":\n          return \"any character\";\n\n        case \"end\":\n          return \"end of input\";\n\n        case \"other\":\n          return expectation.description;\n      }\n    }\n\n    function describeExpected(expected1) {\n      var descriptions = expected1.map(describeExpectation);\n      var i;\n      var j;\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found1) {\n      return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  return SyntaxError;\n}(Error);\n\nexport { SyntaxError };\n\nfunction peg$parse(input, options) {\n  options = options !== undefined ? options : {};\n  var peg$FAILED = {};\n  var peg$startRuleFunctions = {\n    start: peg$parsestart\n  };\n  var peg$startRuleFunction = peg$parsestart;\n\n  var peg$c0 = function peg$c0(parts) {\n    return parts.join('');\n  };\n\n  var peg$c1 = function peg$c1(messageText) {\n    return __assign({\n      type: TYPE.literal,\n      value: messageText\n    }, insertLocation());\n  };\n\n  var peg$c2 = \"#\";\n  var peg$c3 = peg$literalExpectation(\"#\", false);\n\n  var peg$c4 = function peg$c4() {\n    return __assign({\n      type: TYPE.pound\n    }, insertLocation());\n  };\n\n  var peg$c5 = peg$otherExpectation(\"tagElement\");\n  var peg$c6 = \"<\";\n  var peg$c7 = peg$literalExpectation(\"<\", false);\n  var peg$c8 = \"/>\";\n  var peg$c9 = peg$literalExpectation(\"/>\", false);\n\n  var peg$c10 = function peg$c10(value) {\n    return __assign({\n      type: TYPE.literal,\n      value: value.join('')\n    }, insertLocation());\n  };\n\n  var peg$c11 = function peg$c11(open, children, close) {\n    if (open !== close) {\n      error(\"Mismatch tag \\\"\" + open + \"\\\" !== \\\"\" + close + \"\\\"\", location());\n    }\n\n    return __assign({\n      type: TYPE.tag,\n      value: open,\n      children: children\n    }, insertLocation());\n  };\n\n  var peg$c12 = function peg$c12() {\n    messageCtx.push('openingTag');\n    return true;\n  };\n\n  var peg$c13 = \">\";\n  var peg$c14 = peg$literalExpectation(\">\", false);\n\n  var peg$c15 = function peg$c15(tag) {\n    messageCtx.pop();\n    return true;\n  };\n\n  var peg$c16 = function peg$c16(tag) {\n    return tag;\n  };\n\n  var peg$c17 = \"</\";\n  var peg$c18 = peg$literalExpectation(\"</\", false);\n\n  var peg$c19 = function peg$c19() {\n    messageCtx.push('closingTag');\n    return true;\n  };\n\n  var peg$c20 = peg$otherExpectation(\"argumentElement\");\n  var peg$c21 = \"{\";\n  var peg$c22 = peg$literalExpectation(\"{\", false);\n  var peg$c23 = \"}\";\n  var peg$c24 = peg$literalExpectation(\"}\", false);\n\n  var peg$c25 = function peg$c25(value) {\n    return __assign({\n      type: TYPE.argument,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c26 = peg$otherExpectation(\"numberSkeletonId\");\n  var peg$c27 = /^['\\/{}]/;\n  var peg$c28 = peg$classExpectation([\"'\", \"/\", \"{\", \"}\"], false, false);\n  var peg$c29 = peg$anyExpectation();\n  var peg$c30 = peg$otherExpectation(\"numberSkeletonTokenOption\");\n  var peg$c31 = \"/\";\n  var peg$c32 = peg$literalExpectation(\"/\", false);\n\n  var peg$c33 = function peg$c33(option) {\n    return option;\n  };\n\n  var peg$c34 = peg$otherExpectation(\"numberSkeletonToken\");\n\n  var peg$c35 = function peg$c35(stem, options) {\n    return {\n      stem: stem,\n      options: options\n    };\n  };\n\n  var peg$c36 = function peg$c36(tokens) {\n    return __assign({\n      type: 0\n      /* number */\n      ,\n      tokens: tokens\n    }, insertLocation());\n  };\n\n  var peg$c37 = \"::\";\n  var peg$c38 = peg$literalExpectation(\"::\", false);\n\n  var peg$c39 = function peg$c39(skeleton) {\n    return skeleton;\n  };\n\n  var peg$c40 = function peg$c40() {\n    messageCtx.push('numberArgStyle');\n    return true;\n  };\n\n  var peg$c41 = function peg$c41(style) {\n    messageCtx.pop();\n    return style.replace(/\\s*$/, '');\n  };\n\n  var peg$c42 = \",\";\n  var peg$c43 = peg$literalExpectation(\",\", false);\n  var peg$c44 = \"number\";\n  var peg$c45 = peg$literalExpectation(\"number\", false);\n\n  var peg$c46 = function peg$c46(value, type, style) {\n    return __assign({\n      type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time,\n      style: style && style[2],\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c47 = \"'\";\n  var peg$c48 = peg$literalExpectation(\"'\", false);\n  var peg$c49 = /^[^']/;\n  var peg$c50 = peg$classExpectation([\"'\"], true, false);\n  var peg$c51 = /^[^a-zA-Z'{}]/;\n  var peg$c52 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"'\", \"{\", \"}\"], true, false);\n  var peg$c53 = /^[a-zA-Z]/;\n  var peg$c54 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n\n  var peg$c55 = function peg$c55(pattern) {\n    return __assign({\n      type: 1\n      /* dateTime */\n      ,\n      pattern: pattern\n    }, insertLocation());\n  };\n\n  var peg$c56 = function peg$c56() {\n    messageCtx.push('dateOrTimeArgStyle');\n    return true;\n  };\n\n  var peg$c57 = \"date\";\n  var peg$c58 = peg$literalExpectation(\"date\", false);\n  var peg$c59 = \"time\";\n  var peg$c60 = peg$literalExpectation(\"time\", false);\n  var peg$c61 = \"plural\";\n  var peg$c62 = peg$literalExpectation(\"plural\", false);\n  var peg$c63 = \"selectordinal\";\n  var peg$c64 = peg$literalExpectation(\"selectordinal\", false);\n  var peg$c65 = \"offset:\";\n  var peg$c66 = peg$literalExpectation(\"offset:\", false);\n\n  var peg$c67 = function peg$c67(value, pluralType, offset, options) {\n    return __assign({\n      type: TYPE.plural,\n      pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal',\n      value: value,\n      offset: offset ? offset[2] : 0,\n      options: options.reduce(function (all, _a) {\n        var id = _a.id,\n            value = _a.value,\n            optionLocation = _a.location;\n\n        if (id in all) {\n          error(\"Duplicate option \\\"\" + id + \"\\\" in plural element: \\\"\" + text() + \"\\\"\", location());\n        }\n\n        all[id] = {\n          value: value,\n          location: optionLocation\n        };\n        return all;\n      }, {})\n    }, insertLocation());\n  };\n\n  var peg$c68 = \"select\";\n  var peg$c69 = peg$literalExpectation(\"select\", false);\n\n  var peg$c70 = function peg$c70(value, options) {\n    return __assign({\n      type: TYPE.select,\n      value: value,\n      options: options.reduce(function (all, _a) {\n        var id = _a.id,\n            value = _a.value,\n            optionLocation = _a.location;\n\n        if (id in all) {\n          error(\"Duplicate option \\\"\" + id + \"\\\" in select element: \\\"\" + text() + \"\\\"\", location());\n        }\n\n        all[id] = {\n          value: value,\n          location: optionLocation\n        };\n        return all;\n      }, {})\n    }, insertLocation());\n  };\n\n  var peg$c71 = \"=\";\n  var peg$c72 = peg$literalExpectation(\"=\", false);\n\n  var peg$c73 = function peg$c73(id) {\n    messageCtx.push('select');\n    return true;\n  };\n\n  var peg$c74 = function peg$c74(id, value) {\n    messageCtx.pop();\n    return __assign({\n      id: id,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c75 = function peg$c75(id) {\n    messageCtx.push('plural');\n    return true;\n  };\n\n  var peg$c76 = function peg$c76(id, value) {\n    messageCtx.pop();\n    return __assign({\n      id: id,\n      value: value\n    }, insertLocation());\n  };\n\n  var peg$c77 = peg$otherExpectation(\"whitespace\");\n  var peg$c78 = /^[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n  var peg$c79 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\xA0\", \"\\u1680\", [\"\\u2000\", \"\\u200A\"], \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\"], false, false);\n  var peg$c80 = peg$otherExpectation(\"syntax pattern\");\n  var peg$c81 = /^[!-\\/:-@[-\\^`{-~\\xA1-\\xA7\\xA9\\xAB\\xAC\\xAE\\xB0\\xB1\\xB6\\xBB\\xBF\\xD7\\xF7\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]/;\n  var peg$c82 = peg$classExpectation([[\"!\", \"/\"], [\":\", \"@\"], [\"[\", \"^\"], \"`\", [\"{\", \"~\"], [\"\\xA1\", \"\\xA7\"], \"\\xA9\", \"\\xAB\", \"\\xAC\", \"\\xAE\", \"\\xB0\", \"\\xB1\", \"\\xB6\", \"\\xBB\", \"\\xBF\", \"\\xD7\", \"\\xF7\", [\"\\u2010\", \"\\u2027\"], [\"\\u2030\", \"\\u203E\"], [\"\\u2041\", \"\\u2053\"], [\"\\u2055\", \"\\u205E\"], [\"\\u2190\", \"\\u245F\"], [\"\\u2500\", \"\\u2775\"], [\"\\u2794\", \"\\u2BFF\"], [\"\\u2E00\", \"\\u2E7F\"], [\"\\u3001\", \"\\u3003\"], [\"\\u3008\", \"\\u3020\"], \"\\u3030\", \"\\uFD3E\", \"\\uFD3F\", \"\\uFE45\", \"\\uFE46\"], false, false);\n  var peg$c83 = peg$otherExpectation(\"optional whitespace\");\n  var peg$c84 = peg$otherExpectation(\"number\");\n  var peg$c85 = \"-\";\n  var peg$c86 = peg$literalExpectation(\"-\", false);\n\n  var peg$c87 = function peg$c87(negative, num) {\n    return num ? negative ? -num : num : 0;\n  };\n\n  var peg$c88 = peg$otherExpectation(\"apostrophe\");\n  var peg$c89 = peg$otherExpectation(\"double apostrophes\");\n  var peg$c90 = \"''\";\n  var peg$c91 = peg$literalExpectation(\"''\", false);\n\n  var peg$c92 = function peg$c92() {\n    return \"'\";\n  };\n\n  var peg$c93 = function peg$c93(escapedChar, quotedChars) {\n    return escapedChar + quotedChars.replace(\"''\", \"'\");\n  };\n\n  var peg$c94 = function peg$c94(x) {\n    return (ignoreTag() || x !== '<') && x !== '{' && !(isInPluralOption() && x === '#') && !(isNestedMessageText() && x === '}') && !(!ignoreTag() && isNestedMessageText() && x === '>');\n  };\n\n  var peg$c95 = \"\\n\";\n  var peg$c96 = peg$literalExpectation(\"\\n\", false);\n\n  var peg$c97 = function peg$c97(x) {\n    return x === '<' || x === '>' || x === '{' || x === '}' || isInPluralOption() && x === '#';\n  };\n\n  var peg$c98 = peg$otherExpectation(\"argNameOrNumber\");\n  var peg$c99 = peg$otherExpectation(\"validTag\");\n  var peg$c100 = peg$otherExpectation(\"argNumber\");\n  var peg$c101 = \"0\";\n  var peg$c102 = peg$literalExpectation(\"0\", false);\n\n  var peg$c103 = function peg$c103() {\n    return 0;\n  };\n\n  var peg$c104 = /^[1-9]/;\n  var peg$c105 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n  var peg$c106 = /^[0-9]/;\n  var peg$c107 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n\n  var peg$c108 = function peg$c108(digits) {\n    return parseInt(digits.join(''), 10);\n  };\n\n  var peg$c109 = peg$otherExpectation(\"argName\");\n  var peg$c110 = peg$otherExpectation(\"tagName\");\n  var peg$currPos = 0;\n  var peg$savedPos = 0;\n  var peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }];\n  var peg$maxFailPos = 0;\n  var peg$maxFailExpected = [];\n  var peg$silentFails = 0;\n  var peg$result;\n\n  if (options.startRule !== undefined) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location1) {\n    location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n  }\n\n  function error(message, location1) {\n    location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location1);\n  }\n\n  function peg$literalExpectation(text1, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text1,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos];\n    var p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos);\n    var endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected1) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected1);\n  }\n\n  function peg$buildSimpleError(message, location1) {\n    return new SyntaxError(message, [], \"\", location1);\n  }\n\n  function peg$buildStructuredError(expected1, found, location1) {\n    return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n  }\n\n  function peg$parsestart() {\n    var s0;\n    s0 = peg$parsemessage();\n    return s0;\n  }\n\n  function peg$parsemessage() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parsemessageElement();\n\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsemessageElement();\n    }\n\n    return s0;\n  }\n\n  function peg$parsemessageElement() {\n    var s0;\n    s0 = peg$parseliteralElement();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseargumentElement();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsesimpleFormatElement();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsepluralElement();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselectElement();\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsetagElement();\n\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsepoundElement();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemessageText() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedoubleApostrophes();\n\n    if (s2 === peg$FAILED) {\n      s2 = peg$parsequotedString();\n\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseunquotedString();\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedoubleApostrophes();\n\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsequotedString();\n\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseunquotedString();\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c0(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseliteralElement() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parsemessageText();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsepoundElement() {\n    var s0, s1;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c2;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c3);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c4();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsetagElement() {\n    var s0, s1, s2, s3, s4, s5;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s2 = peg$c6;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsevalidTag();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse_();\n\n        if (s4 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c8) {\n            s5 = peg$c8;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c9);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            s2 = [s2, s3, s4, s5];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c10(s1);\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseopeningTag();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsemessage();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseclosingTag();\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c11(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c5);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseopeningTag() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s1 = peg$c6;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c12();\n\n      if (s2) {\n        s2 = undefined;\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalidTag();\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 62) {\n            s4 = peg$c13;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c14);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s5 = peg$c15(s3);\n\n            if (s5) {\n              s5 = undefined;\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c16(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseclosingTag() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c17) {\n      s1 = peg$c17;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c18);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c19();\n\n      if (s2) {\n        s2 = undefined;\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalidTag();\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 62) {\n            s4 = peg$c13;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c14);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s5 = peg$c15(s3);\n\n            if (s5) {\n              s5 = undefined;\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c16(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseargumentElement() {\n    var s0, s1, s2, s3, s4, s5;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c21;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c22);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 125) {\n              s5 = peg$c23;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c24);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c25(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c20);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonId() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    peg$silentFails++;\n    s4 = peg$parsewhiteSpace();\n\n    if (s4 === peg$FAILED) {\n      if (peg$c27.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c28);\n        }\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s4 === peg$FAILED) {\n      s3 = undefined;\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c29);\n        }\n      }\n\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n\n        if (s4 === peg$FAILED) {\n          if (peg$c27.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c28);\n            }\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c29);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c26);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonTokenOption() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 47) {\n      s1 = peg$c31;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c32);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeletonId();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c33(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c30);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeletonToken() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeletonId();\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsenumberSkeletonTokenOption();\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsenumberSkeletonTokenOption();\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c35(s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c34);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberSkeleton() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsenumberSkeletonToken();\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsenumberSkeletonToken();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c36(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsenumberArgStyle() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c37) {\n      s1 = peg$c37;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c38);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumberSkeleton();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c39(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      peg$savedPos = peg$currPos;\n      s1 = peg$c40();\n\n      if (s1) {\n        s1 = undefined;\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsemessageText();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c41(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumberFormatElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c21;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c22);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c42;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c43);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c44) {\n                  s7 = peg$c44;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c45);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s10 = peg$c42;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c43);\n                      }\n                    }\n\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parsenumberArgStyle();\n\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c23;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c24);\n                          }\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c46(s3, s7, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeletonLiteral() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c47;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c48);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsedoubleApostrophes();\n\n      if (s3 === peg$FAILED) {\n        if (peg$c49.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c50);\n          }\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsedoubleApostrophes();\n\n          if (s3 === peg$FAILED) {\n            if (peg$c49.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c50);\n              }\n            }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c47;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c48);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      s1 = peg$parsedoubleApostrophes();\n\n      if (s1 === peg$FAILED) {\n        if (peg$c51.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c52);\n          }\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          s1 = peg$parsedoubleApostrophes();\n\n          if (s1 === peg$FAILED) {\n            if (peg$c51.test(input.charAt(peg$currPos))) {\n              s1 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c52);\n              }\n            }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeletonPattern() {\n    var s0, s1;\n    s0 = [];\n\n    if (peg$c53.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c54);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n\n        if (peg$c53.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c54);\n          }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateTimeSkeleton() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = [];\n    s3 = peg$parsedateTimeSkeletonLiteral();\n\n    if (s3 === peg$FAILED) {\n      s3 = peg$parsedateTimeSkeletonPattern();\n    }\n\n    if (s3 !== peg$FAILED) {\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsedateTimeSkeletonLiteral();\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsedateTimeSkeletonPattern();\n        }\n      }\n    } else {\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c55(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parsedateOrTimeArgStyle() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c37) {\n      s1 = peg$c37;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c38);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedateTimeSkeleton();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c39(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      peg$savedPos = peg$currPos;\n      s1 = peg$c56();\n\n      if (s1) {\n        s1 = undefined;\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsemessageText();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c41(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedateOrTimeFormatElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c21;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c22);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c42;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c43);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 4) === peg$c57) {\n                  s7 = peg$c57;\n                  peg$currPos += 4;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c58);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4) === peg$c59) {\n                    s7 = peg$c59;\n                    peg$currPos += 4;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c60);\n                    }\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s10 = peg$c42;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c43);\n                      }\n                    }\n\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parsedateOrTimeArgStyle();\n\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c23;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c24);\n                          }\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c46(s3, s7, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesimpleFormatElement() {\n    var s0;\n    s0 = peg$parsenumberFormatElement();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedateOrTimeFormatElement();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c21;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c22);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c42;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c43);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c61) {\n                  s7 = peg$c61;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c62);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13) === peg$c63) {\n                    s7 = peg$c63;\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c64);\n                    }\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s9 = peg$c42;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c43);\n                      }\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n\n                        if (input.substr(peg$currPos, 7) === peg$c65) {\n                          s12 = peg$c65;\n                          peg$currPos += 7;\n                        } else {\n                          s12 = peg$FAILED;\n\n                          if (peg$silentFails === 0) {\n                            peg$fail(peg$c66);\n                          }\n                        }\n\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse_();\n\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parsenumber();\n\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n\n                          if (s12 !== peg$FAILED) {\n                            s13 = [];\n                            s14 = peg$parsepluralOption();\n\n                            if (s14 !== peg$FAILED) {\n                              while (s14 !== peg$FAILED) {\n                                s13.push(s14);\n                                s14 = peg$parsepluralOption();\n                              }\n                            } else {\n                              s13 = peg$FAILED;\n                            }\n\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                  s15 = peg$c23;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n\n                                  if (peg$silentFails === 0) {\n                                    peg$fail(peg$c24);\n                                  }\n                                }\n\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c67(s3, s7, s11, s13);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselectElement() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c21;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c22);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargNameOrNumber();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c42;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c43);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c68) {\n                  s7 = peg$c68;\n                  peg$currPos += 6;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c69);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s9 = peg$c42;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c43);\n                      }\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$parseselectOption();\n\n                        if (s12 !== peg$FAILED) {\n                          while (s12 !== peg$FAILED) {\n                            s11.push(s12);\n                            s12 = peg$parseselectOption();\n                          }\n                        } else {\n                          s11 = peg$FAILED;\n                        }\n\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n\n                          if (s12 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                              s13 = peg$c23;\n                              peg$currPos++;\n                            } else {\n                              s13 = peg$FAILED;\n\n                              if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                              }\n                            }\n\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c70(s3, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralRuleSelectValue() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s2 = peg$c71;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c72);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsenumber();\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseargName();\n    }\n\n    return s0;\n  }\n\n  function peg$parseselectOption() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseargName();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s4 = peg$c21;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c22);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s5 = peg$c73(s2);\n\n            if (s5) {\n              s5 = undefined;\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsemessage();\n\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 125) {\n                  s7 = peg$c23;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c24);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c74(s2, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepluralOption() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsepluralRuleSelectValue();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s4 = peg$c21;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c22);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s5 = peg$c75(s2);\n\n            if (s5) {\n              s5 = undefined;\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsemessage();\n\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 125) {\n                  s7 = peg$c23;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c24);\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c76(s2, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhiteSpace() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (peg$c78.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c79);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c77);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepatternSyntax() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (peg$c81.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c82);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c80);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewhiteSpace();\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsewhiteSpace();\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c83);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s1 = peg$c85;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c86);\n      }\n    }\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseargNumber();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c87(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c84);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseapostrophe() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s0 = peg$c47;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c48);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c88);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedoubleApostrophes() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c90) {\n      s1 = peg$c90;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c91);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c92();\n    }\n\n    s0 = s1;\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c89);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsequotedString() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c47;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c48);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseescapedChar();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = [];\n\n        if (input.substr(peg$currPos, 2) === peg$c90) {\n          s5 = peg$c90;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c91);\n          }\n        }\n\n        if (s5 === peg$FAILED) {\n          if (peg$c49.test(input.charAt(peg$currPos))) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c50);\n            }\n          }\n        }\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n\n          if (input.substr(peg$currPos, 2) === peg$c90) {\n            s5 = peg$c90;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c91);\n            }\n          }\n\n          if (s5 === peg$FAILED) {\n            if (peg$c49.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c50);\n              }\n            }\n          }\n        }\n\n        if (s4 !== peg$FAILED) {\n          s3 = input.substring(s3, peg$currPos);\n        } else {\n          s3 = s4;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s4 = peg$c47;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c48);\n            }\n          }\n\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c93(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunquotedString() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.length > peg$currPos) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c29);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c94(s2);\n\n      if (s3) {\n        s3 = undefined;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s1 = peg$c95;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c96);\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseescapedChar() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n\n    if (input.length > peg$currPos) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c29);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c97(s2);\n\n      if (s3) {\n        s3 = undefined;\n      } else {\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseargNameOrNumber() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseargNumber();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseargName();\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c98);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalidTag() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseargNumber();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsetagName();\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c99);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseargNumber() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 48) {\n      s1 = peg$c101;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c102);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103();\n    }\n\n    s0 = s1;\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (peg$c104.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c105);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n\n        if (peg$c106.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c107);\n          }\n        }\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n\n          if (peg$c106.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c107);\n            }\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c108(s1);\n      }\n\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c100);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseargName() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    peg$silentFails++;\n    s4 = peg$parsewhiteSpace();\n\n    if (s4 === peg$FAILED) {\n      s4 = peg$parsepatternSyntax();\n    }\n\n    peg$silentFails--;\n\n    if (s4 === peg$FAILED) {\n      s3 = undefined;\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c29);\n        }\n      }\n\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n\n        if (s4 === peg$FAILED) {\n          s4 = peg$parsepatternSyntax();\n        }\n\n        peg$silentFails--;\n\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c29);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c109);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetagName() {\n    var s0, s1, s2, s3, s4;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s2 = peg$c85;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c86);\n      }\n    }\n\n    if (s2 === peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$currPos;\n      peg$silentFails++;\n      s4 = peg$parsewhiteSpace();\n\n      if (s4 === peg$FAILED) {\n        s4 = peg$parsepatternSyntax();\n      }\n\n      peg$silentFails--;\n\n      if (s4 === peg$FAILED) {\n        s3 = undefined;\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c29);\n          }\n        }\n\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s2 = peg$c85;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c86);\n          }\n        }\n\n        if (s2 === peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parsewhiteSpace();\n\n          if (s4 === peg$FAILED) {\n            s4 = peg$parsepatternSyntax();\n          }\n\n          peg$silentFails--;\n\n          if (s4 === peg$FAILED) {\n            s3 = undefined;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n\n          if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n              }\n            }\n\n            if (s4 !== peg$FAILED) {\n              s3 = [s3, s4];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c110);\n      }\n    }\n\n    return s0;\n  }\n\n  var messageCtx = ['root'];\n\n  function isNestedMessageText() {\n    return messageCtx.length > 1;\n  }\n\n  function isInPluralOption() {\n    return messageCtx[messageCtx.length - 1] === 'plural';\n  }\n\n  function insertLocation() {\n    return options && options.captureLocation ? {\n      location: location()\n    } : {};\n  }\n\n  function ignoreTag() {\n    return options && options.ignoreTag;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n\nexport var pegParse = peg$parse;","map":{"version":3,"sources":["../src/parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// tslint:disable:only-arrow-functions\n// tslint:disable:object-literal-shorthand\n// tslint:disable:trailing-comma\n// tslint:disable:object-literal-sort-keys\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:max-line-length\n// tslint:disable:no-consecutive-blank-lines\n// tslint:disable:align\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )\n//\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\nimport { TYPE, } from './types';\nvar SyntaxError = /** @class */ (function (_super) {\n    __extends(SyntaxError, _super);\n    function SyntaxError(message, expected, found, location) {\n        var _this = _super.call(this) || this;\n        _this.message = message;\n        _this.expected = expected;\n        _this.found = found;\n        _this.location = location;\n        _this.name = \"SyntaxError\";\n        if (typeof Error.captureStackTrace === \"function\") {\n            Error.captureStackTrace(_this, SyntaxError);\n        }\n        return _this;\n    }\n    SyntaxError.buildMessage = function (expected, found) {\n        function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n        }\n        function literalEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\"/g, \"\\\\\\\"\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function classEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\\]/g, \"\\\\]\")\n                .replace(/\\^/g, \"\\\\^\")\n                .replace(/-/g, \"\\\\-\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function describeExpectation(expectation) {\n            switch (expectation.type) {\n                case \"literal\":\n                    return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n                case \"class\":\n                    var escapedParts = expectation.parts.map(function (part) {\n                        return Array.isArray(part)\n                            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n                            : classEscape(part);\n                    });\n                    return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n                case \"any\":\n                    return \"any character\";\n                case \"end\":\n                    return \"end of input\";\n                case \"other\":\n                    return expectation.description;\n            }\n        }\n        function describeExpected(expected1) {\n            var descriptions = expected1.map(describeExpectation);\n            var i;\n            var j;\n            descriptions.sort();\n            if (descriptions.length > 0) {\n                for (i = 1, j = 1; i < descriptions.length; i++) {\n                    if (descriptions[i - 1] !== descriptions[i]) {\n                        descriptions[j] = descriptions[i];\n                        j++;\n                    }\n                }\n                descriptions.length = j;\n            }\n            switch (descriptions.length) {\n                case 1:\n                    return descriptions[0];\n                case 2:\n                    return descriptions[0] + \" or \" + descriptions[1];\n                default:\n                    return descriptions.slice(0, -1).join(\", \")\n                        + \", or \"\n                        + descriptions[descriptions.length - 1];\n            }\n        }\n        function describeFound(found1) {\n            return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n        }\n        return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    return SyntaxError;\n}(Error));\nexport { SyntaxError };\nfunction peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n    var peg$FAILED = {};\n    var peg$startRuleFunctions = { start: peg$parsestart };\n    var peg$startRuleFunction = peg$parsestart;\n    var peg$c0 = function (parts) {\n        return parts.join('');\n    };\n    var peg$c1 = function (messageText) {\n        return __assign({ type: TYPE.literal, value: messageText }, insertLocation());\n    };\n    var peg$c2 = \"#\";\n    var peg$c3 = peg$literalExpectation(\"#\", false);\n    var peg$c4 = function () {\n        return __assign({ type: TYPE.pound }, insertLocation());\n    };\n    var peg$c5 = peg$otherExpectation(\"tagElement\");\n    var peg$c6 = \"<\";\n    var peg$c7 = peg$literalExpectation(\"<\", false);\n    var peg$c8 = \"/>\";\n    var peg$c9 = peg$literalExpectation(\"/>\", false);\n    var peg$c10 = function (value) {\n        return __assign({ type: TYPE.literal, value: value.join('') }, insertLocation());\n    };\n    var peg$c11 = function (open, children, close) {\n        if (open !== close) {\n            error(\"Mismatch tag \\\"\" + open + \"\\\" !== \\\"\" + close + \"\\\"\", location());\n        }\n        return __assign({ type: TYPE.tag, value: open, children: children }, insertLocation());\n    };\n    var peg$c12 = function () { messageCtx.push('openingTag'); return true; };\n    var peg$c13 = \">\";\n    var peg$c14 = peg$literalExpectation(\">\", false);\n    var peg$c15 = function (tag) { messageCtx.pop(); return true; };\n    var peg$c16 = function (tag) {\n        return tag;\n    };\n    var peg$c17 = \"</\";\n    var peg$c18 = peg$literalExpectation(\"</\", false);\n    var peg$c19 = function () { messageCtx.push('closingTag'); return true; };\n    var peg$c20 = peg$otherExpectation(\"argumentElement\");\n    var peg$c21 = \"{\";\n    var peg$c22 = peg$literalExpectation(\"{\", false);\n    var peg$c23 = \"}\";\n    var peg$c24 = peg$literalExpectation(\"}\", false);\n    var peg$c25 = function (value) {\n        return __assign({ type: TYPE.argument, value: value }, insertLocation());\n    };\n    var peg$c26 = peg$otherExpectation(\"numberSkeletonId\");\n    var peg$c27 = /^['\\/{}]/;\n    var peg$c28 = peg$classExpectation([\"'\", \"/\", \"{\", \"}\"], false, false);\n    var peg$c29 = peg$anyExpectation();\n    var peg$c30 = peg$otherExpectation(\"numberSkeletonTokenOption\");\n    var peg$c31 = \"/\";\n    var peg$c32 = peg$literalExpectation(\"/\", false);\n    var peg$c33 = function (option) { return option; };\n    var peg$c34 = peg$otherExpectation(\"numberSkeletonToken\");\n    var peg$c35 = function (stem, options) {\n        return { stem: stem, options: options };\n    };\n    var peg$c36 = function (tokens) {\n        return __assign({ type: 0 /* number */, tokens: tokens }, insertLocation());\n    };\n    var peg$c37 = \"::\";\n    var peg$c38 = peg$literalExpectation(\"::\", false);\n    var peg$c39 = function (skeleton) { return skeleton; };\n    var peg$c40 = function () { messageCtx.push('numberArgStyle'); return true; };\n    var peg$c41 = function (style) {\n        messageCtx.pop();\n        return style.replace(/\\s*$/, '');\n    };\n    var peg$c42 = \",\";\n    var peg$c43 = peg$literalExpectation(\",\", false);\n    var peg$c44 = \"number\";\n    var peg$c45 = peg$literalExpectation(\"number\", false);\n    var peg$c46 = function (value, type, style) {\n        return __assign({ type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time, style: style && style[2], value: value }, insertLocation());\n    };\n    var peg$c47 = \"'\";\n    var peg$c48 = peg$literalExpectation(\"'\", false);\n    var peg$c49 = /^[^']/;\n    var peg$c50 = peg$classExpectation([\"'\"], true, false);\n    var peg$c51 = /^[^a-zA-Z'{}]/;\n    var peg$c52 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"'\", \"{\", \"}\"], true, false);\n    var peg$c53 = /^[a-zA-Z]/;\n    var peg$c54 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n    var peg$c55 = function (pattern) {\n        return __assign({ type: 1 /* dateTime */, pattern: pattern }, insertLocation());\n    };\n    var peg$c56 = function () { messageCtx.push('dateOrTimeArgStyle'); return true; };\n    var peg$c57 = \"date\";\n    var peg$c58 = peg$literalExpectation(\"date\", false);\n    var peg$c59 = \"time\";\n    var peg$c60 = peg$literalExpectation(\"time\", false);\n    var peg$c61 = \"plural\";\n    var peg$c62 = peg$literalExpectation(\"plural\", false);\n    var peg$c63 = \"selectordinal\";\n    var peg$c64 = peg$literalExpectation(\"selectordinal\", false);\n    var peg$c65 = \"offset:\";\n    var peg$c66 = peg$literalExpectation(\"offset:\", false);\n    var peg$c67 = function (value, pluralType, offset, options) {\n        return __assign({ type: TYPE.plural, pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal', value: value, offset: offset ? offset[2] : 0, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, optionLocation = _a.location;\n                if (id in all) {\n                    error(\"Duplicate option \\\"\" + id + \"\\\" in plural element: \\\"\" + text() + \"\\\"\", location());\n                }\n                all[id] = {\n                    value: value,\n                    location: optionLocation\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c68 = \"select\";\n    var peg$c69 = peg$literalExpectation(\"select\", false);\n    var peg$c70 = function (value, options) {\n        return __assign({ type: TYPE.select, value: value, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, optionLocation = _a.location;\n                if (id in all) {\n                    error(\"Duplicate option \\\"\" + id + \"\\\" in select element: \\\"\" + text() + \"\\\"\", location());\n                }\n                all[id] = {\n                    value: value,\n                    location: optionLocation\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c71 = \"=\";\n    var peg$c72 = peg$literalExpectation(\"=\", false);\n    var peg$c73 = function (id) { messageCtx.push('select'); return true; };\n    var peg$c74 = function (id, value) {\n        messageCtx.pop();\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c75 = function (id) { messageCtx.push('plural'); return true; };\n    var peg$c76 = function (id, value) {\n        messageCtx.pop();\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c77 = peg$otherExpectation(\"whitespace\");\n    var peg$c78 = /^[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n    var peg$c79 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\xA0\", \"\\u1680\", [\"\\u2000\", \"\\u200A\"], \"\\u2028\", \"\\u2029\", \"\\u202F\", \"\\u205F\", \"\\u3000\"], false, false);\n    var peg$c80 = peg$otherExpectation(\"syntax pattern\");\n    var peg$c81 = /^[!-\\/:-@[-\\^`{-~\\xA1-\\xA7\\xA9\\xAB\\xAC\\xAE\\xB0\\xB1\\xB6\\xBB\\xBF\\xD7\\xF7\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]/;\n    var peg$c82 = peg$classExpectation([[\"!\", \"/\"], [\":\", \"@\"], [\"[\", \"^\"], \"`\", [\"{\", \"~\"], [\"\\xA1\", \"\\xA7\"], \"\\xA9\", \"\\xAB\", \"\\xAC\", \"\\xAE\", \"\\xB0\", \"\\xB1\", \"\\xB6\", \"\\xBB\", \"\\xBF\", \"\\xD7\", \"\\xF7\", [\"\\u2010\", \"\\u2027\"], [\"\\u2030\", \"\\u203E\"], [\"\\u2041\", \"\\u2053\"], [\"\\u2055\", \"\\u205E\"], [\"\\u2190\", \"\\u245F\"], [\"\\u2500\", \"\\u2775\"], [\"\\u2794\", \"\\u2BFF\"], [\"\\u2E00\", \"\\u2E7F\"], [\"\\u3001\", \"\\u3003\"], [\"\\u3008\", \"\\u3020\"], \"\\u3030\", \"\\uFD3E\", \"\\uFD3F\", \"\\uFE45\", \"\\uFE46\"], false, false);\n    var peg$c83 = peg$otherExpectation(\"optional whitespace\");\n    var peg$c84 = peg$otherExpectation(\"number\");\n    var peg$c85 = \"-\";\n    var peg$c86 = peg$literalExpectation(\"-\", false);\n    var peg$c87 = function (negative, num) {\n        return num\n            ? negative\n                ? -num\n                : num\n            : 0;\n    };\n    var peg$c88 = peg$otherExpectation(\"apostrophe\");\n    var peg$c89 = peg$otherExpectation(\"double apostrophes\");\n    var peg$c90 = \"''\";\n    var peg$c91 = peg$literalExpectation(\"''\", false);\n    var peg$c92 = function () { return \"'\"; };\n    var peg$c93 = function (escapedChar, quotedChars) {\n        return escapedChar + quotedChars.replace(\"''\", \"'\");\n    };\n    var peg$c94 = function (x) {\n        return ((ignoreTag() || x !== '<') &&\n            x !== '{' &&\n            !(isInPluralOption() && x === '#') &&\n            !(isNestedMessageText() && x === '}') &&\n            !(!ignoreTag() && isNestedMessageText() && x === '>'));\n    };\n    var peg$c95 = \"\\n\";\n    var peg$c96 = peg$literalExpectation(\"\\n\", false);\n    var peg$c97 = function (x) {\n        return x === '<' || x === '>' || x === '{' || x === '}' || (isInPluralOption() && x === '#');\n    };\n    var peg$c98 = peg$otherExpectation(\"argNameOrNumber\");\n    var peg$c99 = peg$otherExpectation(\"validTag\");\n    var peg$c100 = peg$otherExpectation(\"argNumber\");\n    var peg$c101 = \"0\";\n    var peg$c102 = peg$literalExpectation(\"0\", false);\n    var peg$c103 = function () { return 0; };\n    var peg$c104 = /^[1-9]/;\n    var peg$c105 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n    var peg$c106 = /^[0-9]/;\n    var peg$c107 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n    var peg$c108 = function (digits) {\n        return parseInt(digits.join(''), 10);\n    };\n    var peg$c109 = peg$otherExpectation(\"argName\");\n    var peg$c110 = peg$otherExpectation(\"tagName\");\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n    var peg$result;\n    if (options.startRule !== undefined) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n            throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n    function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n    }\n    function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n    function expected(description, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n    }\n    function error(message, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location1);\n    }\n    function peg$literalExpectation(text1, ignoreCase) {\n        return { type: \"literal\", text: text1, ignoreCase: ignoreCase };\n    }\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n    function peg$anyExpectation() {\n        return { type: \"any\" };\n    }\n    function peg$endExpectation() {\n        return { type: \"end\" };\n    }\n    function peg$otherExpectation(description) {\n        return { type: \"other\", description: description };\n    }\n    function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n            return details;\n        }\n        else {\n            p = pos - 1;\n            while (!peg$posDetailsCache[p]) {\n                p--;\n            }\n            details = peg$posDetailsCache[p];\n            details = {\n                line: details.line,\n                column: details.column\n            };\n            while (p < pos) {\n                if (input.charCodeAt(p) === 10) {\n                    details.line++;\n                    details.column = 1;\n                }\n                else {\n                    details.column++;\n                }\n                p++;\n            }\n            peg$posDetailsCache[pos] = details;\n            return details;\n        }\n    }\n    function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n            start: {\n                offset: startPos,\n                line: startPosDetails.line,\n                column: startPosDetails.column\n            },\n            end: {\n                offset: endPos,\n                line: endPosDetails.line,\n                column: endPosDetails.column\n            }\n        };\n    }\n    function peg$fail(expected1) {\n        if (peg$currPos < peg$maxFailPos) {\n            return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n            peg$maxFailPos = peg$currPos;\n            peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected1);\n    }\n    function peg$buildSimpleError(message, location1) {\n        return new SyntaxError(message, [], \"\", location1);\n    }\n    function peg$buildStructuredError(expected1, found, location1) {\n        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n    }\n    function peg$parsestart() {\n        var s0;\n        s0 = peg$parsemessage();\n        return s0;\n    }\n    function peg$parsemessage() {\n        var s0, s1;\n        s0 = [];\n        s1 = peg$parsemessageElement();\n        while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            s1 = peg$parsemessageElement();\n        }\n        return s0;\n    }\n    function peg$parsemessageElement() {\n        var s0;\n        s0 = peg$parseliteralElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargumentElement();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parsesimpleFormatElement();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parsepluralElement();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseselectElement();\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$parsetagElement();\n                            if (s0 === peg$FAILED) {\n                                s0 = peg$parsepoundElement();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return s0;\n    }\n    function peg$parsemessageText() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsedoubleApostrophes();\n        if (s2 === peg$FAILED) {\n            s2 = peg$parsequotedString();\n            if (s2 === peg$FAILED) {\n                s2 = peg$parseunquotedString();\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsedoubleApostrophes();\n                if (s2 === peg$FAILED) {\n                    s2 = peg$parsequotedString();\n                    if (s2 === peg$FAILED) {\n                        s2 = peg$parseunquotedString();\n                    }\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c0(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parseliteralElement() {\n        var s0, s1;\n        s0 = peg$currPos;\n        s1 = peg$parsemessageText();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsepoundElement() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 35) {\n            s1 = peg$c2;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c3);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c4();\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsetagElement() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 60) {\n            s2 = peg$c6;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c7);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parsevalidTag();\n            if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c8) {\n                        s5 = peg$c8;\n                        peg$currPos += 2;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c9);\n                        }\n                    }\n                    if (s5 !== peg$FAILED) {\n                        s2 = [s2, s3, s4, s5];\n                        s1 = s2;\n                    }\n                    else {\n                        peg$currPos = s1;\n                        s1 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c10(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseopeningTag();\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsemessage();\n                if (s2 !== peg$FAILED) {\n                    s3 = peg$parseclosingTag();\n                    if (s3 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c11(s1, s2, s3);\n                        s0 = s1;\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c5);\n            }\n        }\n        return s0;\n    }\n    function peg$parseopeningTag() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 60) {\n            s1 = peg$c6;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c7);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s2 = peg$c12();\n            if (s2) {\n                s2 = undefined;\n            }\n            else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parsevalidTag();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 62) {\n                        s4 = peg$c13;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c14);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c15(s3);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c16(s3);\n                            s0 = s1;\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseclosingTag() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c17) {\n            s1 = peg$c17;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c18);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s2 = peg$c19();\n            if (s2) {\n                s2 = undefined;\n            }\n            else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parsevalidTag();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 62) {\n                        s4 = peg$c13;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c14);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c15(s3);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c16(s3);\n                            s0 = s1;\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseargumentElement() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c21;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c22);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                            s5 = peg$c23;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c25(s3);\n                            s0 = s1;\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c20);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonId() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n        if (s4 === peg$FAILED) {\n            if (peg$c27.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c28);\n                }\n            }\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c29);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsewhiteSpace();\n                if (s4 === peg$FAILED) {\n                    if (peg$c27.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c28);\n                        }\n                    }\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c29);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c26);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonTokenOption() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 47) {\n            s1 = peg$c31;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c32);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c33(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c30);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonToken() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                s4 = peg$parsenumberSkeletonTokenOption();\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$parsenumberSkeletonTokenOption();\n                }\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c35(s2, s3);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c34);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeleton() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsenumberSkeletonToken();\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsenumberSkeletonToken();\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c36(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsenumberArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c37) {\n            s1 = peg$c37;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c38);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c39(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            peg$savedPos = peg$currPos;\n            s1 = peg$c40();\n            if (s1) {\n                s1 = undefined;\n            }\n            else {\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsemessageText();\n                if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c41(s2);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c21;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c22);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c42;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c43);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c44) {\n                                    s7 = peg$c44;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c45);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c42;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c43);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsenumberArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c23;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c24);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c46(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonLiteral() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c47;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c48);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsedoubleApostrophes();\n            if (s3 === peg$FAILED) {\n                if (peg$c49.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c50);\n                    }\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$parsedoubleApostrophes();\n                    if (s3 === peg$FAILED) {\n                        if (peg$c49.test(input.charAt(peg$currPos))) {\n                            s3 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s3 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c50);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c47;\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c48);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s1 = [s1, s2, s3];\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = [];\n            s1 = peg$parsedoubleApostrophes();\n            if (s1 === peg$FAILED) {\n                if (peg$c51.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c52);\n                    }\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                while (s1 !== peg$FAILED) {\n                    s0.push(s1);\n                    s1 = peg$parsedoubleApostrophes();\n                    if (s1 === peg$FAILED) {\n                        if (peg$c51.test(input.charAt(peg$currPos))) {\n                            s1 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c52);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonPattern() {\n        var s0, s1;\n        s0 = [];\n        if (peg$c53.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c54);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            while (s1 !== peg$FAILED) {\n                s0.push(s1);\n                if (peg$c53.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c54);\n                    }\n                }\n            }\n        }\n        else {\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeleton() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parsedateTimeSkeletonLiteral();\n        if (s3 === peg$FAILED) {\n            s3 = peg$parsedateTimeSkeletonPattern();\n        }\n        if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parsedateTimeSkeletonLiteral();\n                if (s3 === peg$FAILED) {\n                    s3 = peg$parsedateTimeSkeletonPattern();\n                }\n            }\n        }\n        else {\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            s1 = input.substring(s1, peg$currPos);\n        }\n        else {\n            s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c55(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsedateOrTimeArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c37) {\n            s1 = peg$c37;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c38);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsedateTimeSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c39(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            peg$savedPos = peg$currPos;\n            s1 = peg$c56();\n            if (s1) {\n                s1 = undefined;\n            }\n            else {\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                s2 = peg$parsemessageText();\n                if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c41(s2);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsedateOrTimeFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c21;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c22);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c42;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c43);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 4) === peg$c57) {\n                                    s7 = peg$c57;\n                                    peg$currPos += 4;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c58);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 4) === peg$c59) {\n                                        s7 = peg$c59;\n                                        peg$currPos += 4;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c60);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c42;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c43);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsedateOrTimeArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c23;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c24);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c46(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsesimpleFormatElement() {\n        var s0;\n        s0 = peg$parsenumberFormatElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parsedateOrTimeFormatElement();\n        }\n        return s0;\n    }\n    function peg$parsepluralElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c21;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c22);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c42;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c43);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c61) {\n                                    s7 = peg$c61;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c62);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 13) === peg$c63) {\n                                        s7 = peg$c63;\n                                        peg$currPos += 13;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c64);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c42;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c43);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = peg$currPos;\n                                                if (input.substr(peg$currPos, 7) === peg$c65) {\n                                                    s12 = peg$c65;\n                                                    peg$currPos += 7;\n                                                }\n                                                else {\n                                                    s12 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c66);\n                                                    }\n                                                }\n                                                if (s12 !== peg$FAILED) {\n                                                    s13 = peg$parse_();\n                                                    if (s13 !== peg$FAILED) {\n                                                        s14 = peg$parsenumber();\n                                                        if (s14 !== peg$FAILED) {\n                                                            s12 = [s12, s13, s14];\n                                                            s11 = s12;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s11;\n                                                            s11 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s11;\n                                                        s11 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s11;\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 === peg$FAILED) {\n                                                    s11 = null;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        s13 = [];\n                                                        s14 = peg$parsepluralOption();\n                                                        if (s14 !== peg$FAILED) {\n                                                            while (s14 !== peg$FAILED) {\n                                                                s13.push(s14);\n                                                                s14 = peg$parsepluralOption();\n                                                            }\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            s14 = peg$parse_();\n                                                            if (s14 !== peg$FAILED) {\n                                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                                    s15 = peg$c23;\n                                                                    peg$currPos++;\n                                                                }\n                                                                else {\n                                                                    s15 = peg$FAILED;\n                                                                    if (peg$silentFails === 0) {\n                                                                        peg$fail(peg$c24);\n                                                                    }\n                                                                }\n                                                                if (s15 !== peg$FAILED) {\n                                                                    peg$savedPos = s0;\n                                                                    s1 = peg$c67(s3, s7, s11, s13);\n                                                                    s0 = s1;\n                                                                }\n                                                                else {\n                                                                    peg$currPos = s0;\n                                                                    s0 = peg$FAILED;\n                                                                }\n                                                            }\n                                                            else {\n                                                                peg$currPos = s0;\n                                                                s0 = peg$FAILED;\n                                                            }\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseselectElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c21;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c22);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c42;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c43);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c68) {\n                                    s7 = peg$c68;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c69);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c42;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c43);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = [];\n                                                s12 = peg$parseselectOption();\n                                                if (s12 !== peg$FAILED) {\n                                                    while (s12 !== peg$FAILED) {\n                                                        s11.push(s12);\n                                                        s12 = peg$parseselectOption();\n                                                    }\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        if (input.charCodeAt(peg$currPos) === 125) {\n                                                            s13 = peg$c23;\n                                                            peg$currPos++;\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                            if (peg$silentFails === 0) {\n                                                                peg$fail(peg$c24);\n                                                            }\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c70(s3, s11);\n                                                            s0 = s1;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralRuleSelectValue() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 61) {\n            s2 = peg$c71;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c72);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parsenumber();\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargName();\n        }\n        return s0;\n    }\n    function peg$parseselectOption() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargName();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c21;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c22);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c73(s2);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parsemessage();\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                    s7 = peg$c23;\n                                    peg$currPos++;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c24);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c74(s2, s6);\n                                    s0 = s1;\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralOption() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsepluralRuleSelectValue();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c21;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c22);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = peg$currPos;\n                        s5 = peg$c75(s2);\n                        if (s5) {\n                            s5 = undefined;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parsemessage();\n                            if (s6 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                    s7 = peg$c23;\n                                    peg$currPos++;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c24);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c76(s2, s6);\n                                    s0 = s1;\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsewhiteSpace() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c78.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c79);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c77);\n            }\n        }\n        return s0;\n    }\n    function peg$parsepatternSyntax() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c81.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c82);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c80);\n            }\n        }\n        return s0;\n    }\n    function peg$parse_() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsewhiteSpace();\n        while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parsewhiteSpace();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c83);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumber() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c85;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c86);\n            }\n        }\n        if (s1 === peg$FAILED) {\n            s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargNumber();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c87(s1, s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c84);\n            }\n        }\n        return s0;\n    }\n    function peg$parseapostrophe() {\n        var s0, s1;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s0 = peg$c47;\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c48);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c88);\n            }\n        }\n        return s0;\n    }\n    function peg$parsedoubleApostrophes() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c90) {\n            s1 = peg$c90;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c91);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c92();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c89);\n            }\n        }\n        return s0;\n    }\n    function peg$parsequotedString() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c47;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c48);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseescapedChar();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$currPos;\n                s4 = [];\n                if (input.substr(peg$currPos, 2) === peg$c90) {\n                    s5 = peg$c90;\n                    peg$currPos += 2;\n                }\n                else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c91);\n                    }\n                }\n                if (s5 === peg$FAILED) {\n                    if (peg$c49.test(input.charAt(peg$currPos))) {\n                        s5 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c50);\n                        }\n                    }\n                }\n                while (s5 !== peg$FAILED) {\n                    s4.push(s5);\n                    if (input.substr(peg$currPos, 2) === peg$c90) {\n                        s5 = peg$c90;\n                        peg$currPos += 2;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c91);\n                        }\n                    }\n                    if (s5 === peg$FAILED) {\n                        if (peg$c49.test(input.charAt(peg$currPos))) {\n                            s5 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c50);\n                            }\n                        }\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s3 = input.substring(s3, peg$currPos);\n                }\n                else {\n                    s3 = s4;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                        s4 = peg$c47;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c48);\n                        }\n                    }\n                    if (s4 === peg$FAILED) {\n                        s4 = null;\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c93(s2, s3);\n                        s0 = s1;\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseunquotedString() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s3 = peg$c94(s2);\n            if (s3) {\n                s3 = undefined;\n            }\n            else {\n                s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 10) {\n                s1 = peg$c95;\n                peg$currPos++;\n            }\n            else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c96);\n                }\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parseescapedChar() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s3 = peg$c97(s2);\n            if (s3) {\n                s3 = undefined;\n            }\n            else {\n                s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parseargNameOrNumber() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseargNumber();\n        if (s1 === peg$FAILED) {\n            s1 = peg$parseargName();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c98);\n            }\n        }\n        return s0;\n    }\n    function peg$parsevalidTag() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseargNumber();\n        if (s1 === peg$FAILED) {\n            s1 = peg$parsetagName();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c99);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargNumber() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 48) {\n            s1 = peg$c101;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c102);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c103();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            if (peg$c104.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c105);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                if (peg$c106.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c107);\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    if (peg$c106.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c107);\n                        }\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s2 = [s2, s3];\n                    s1 = s2;\n                }\n                else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c108(s1);\n            }\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c100);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargName() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsewhiteSpace();\n        if (s4 === peg$FAILED) {\n            s4 = peg$parsepatternSyntax();\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c29);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsewhiteSpace();\n                if (s4 === peg$FAILED) {\n                    s4 = peg$parsepatternSyntax();\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c29);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c109);\n            }\n        }\n        return s0;\n    }\n    function peg$parsetagName() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        if (input.charCodeAt(peg$currPos) === 45) {\n            s2 = peg$c85;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c86);\n            }\n        }\n        if (s2 === peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = peg$currPos;\n            peg$silentFails++;\n            s4 = peg$parsewhiteSpace();\n            if (s4 === peg$FAILED) {\n                s4 = peg$parsepatternSyntax();\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n                s3 = undefined;\n            }\n            else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c29);\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s3 = [s3, s4];\n                    s2 = s3;\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                if (input.charCodeAt(peg$currPos) === 45) {\n                    s2 = peg$c85;\n                    peg$currPos++;\n                }\n                else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c86);\n                    }\n                }\n                if (s2 === peg$FAILED) {\n                    s2 = peg$currPos;\n                    s3 = peg$currPos;\n                    peg$silentFails++;\n                    s4 = peg$parsewhiteSpace();\n                    if (s4 === peg$FAILED) {\n                        s4 = peg$parsepatternSyntax();\n                    }\n                    peg$silentFails--;\n                    if (s4 === peg$FAILED) {\n                        s3 = undefined;\n                    }\n                    else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 !== peg$FAILED) {\n                        if (input.length > peg$currPos) {\n                            s4 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s4 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c29);\n                            }\n                        }\n                        if (s4 !== peg$FAILED) {\n                            s3 = [s3, s4];\n                            s2 = s3;\n                        }\n                        else {\n                            peg$currPos = s2;\n                            s2 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c110);\n            }\n        }\n        return s0;\n    }\n    var messageCtx = ['root'];\n    function isNestedMessageText() {\n        return messageCtx.length > 1;\n    }\n    function isInPluralOption() {\n        return messageCtx[messageCtx.length - 1] === 'plural';\n    }\n    function insertLocation() {\n        return options && options.captureLocation ? {\n            location: location()\n        } : {};\n    }\n    function ignoreTag() {\n        return options && options.ignoreTag;\n    }\n    peg$result = peg$startRuleFunction();\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n    }\n    else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n            peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length\n            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n}\nexport var pegParse = peg$parse;\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}