{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { parse } from 'intl-messageformat-parser';\nimport memoizeIntlConstructor from 'intl-format-cache';\nimport { formatToParts } from './formatters'; // -- MessageFormat --------------------------------------------------------\n\nfunction mergeConfig(c1, c2) {\n  if (!c2) {\n    return c1;\n  }\n\n  return __assign(__assign(__assign({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function (all, k) {\n    all[k] = __assign(__assign({}, c1[k]), c2[k] || {});\n    return all;\n  }, {}));\n}\n\nfunction mergeConfigs(defaultConfig, configs) {\n  if (!configs) {\n    return defaultConfig;\n  }\n\n  return Object.keys(defaultConfig).reduce(function (all, k) {\n    all[k] = mergeConfig(defaultConfig[k], configs[k]);\n    return all;\n  }, __assign({}, defaultConfig));\n}\n\nexport function createDefaultFormatters(cache) {\n  if (cache === void 0) {\n    cache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n  }\n\n  return {\n    getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\n    getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\n    getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules)\n  };\n}\n\nvar IntlMessageFormat =\n/** @class */\nfunction () {\n  function IntlMessageFormat(message, locales, overrideFormats, opts) {\n    var _this = this;\n\n    if (locales === void 0) {\n      locales = IntlMessageFormat.defaultLocale;\n    }\n\n    this.formatterCache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n\n    this.format = function (values) {\n      var parts = _this.formatToParts(values); // Hot path for straight simple msg translations\n\n\n      if (parts.length === 1) {\n        return parts[0].value;\n      }\n\n      var result = parts.reduce(function (all, part) {\n        if (!all.length || part.type !== 0\n        /* literal */\n        || typeof all[all.length - 1] !== 'string') {\n          all.push(part.value);\n        } else {\n          all[all.length - 1] += part.value;\n        }\n\n        return all;\n      }, []);\n\n      if (result.length <= 1) {\n        return result[0] || '';\n      }\n\n      return result;\n    };\n\n    this.formatToParts = function (values) {\n      return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n    };\n\n    this.resolvedOptions = function () {\n      return {\n        locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n      };\n    };\n\n    this.getAst = function () {\n      return _this.ast;\n    };\n\n    if (typeof message === 'string') {\n      this.message = message;\n\n      if (!IntlMessageFormat.__parse) {\n        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n      } // Parse string messages into an AST.\n\n\n      this.ast = IntlMessageFormat.__parse(message, {\n        normalizeHashtagInPlural: false\n      });\n    } else {\n      this.ast = message;\n    }\n\n    if (!Array.isArray(this.ast)) {\n      throw new TypeError('A message must be provided as a String or AST.');\n    } // Creates a new object with the specified `formats` merged with the default\n    // formats.\n\n\n    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats); // Defined first because it's used to build the format pattern.\n\n    this.locales = locales;\n    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n  }\n\n  Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n    get: function get() {\n      if (!IntlMessageFormat.memoizedDefaultLocale) {\n        IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n      }\n\n      return IntlMessageFormat.memoizedDefaultLocale;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  IntlMessageFormat.memoizedDefaultLocale = null;\n  IntlMessageFormat.__parse = parse; // Default format options used as the prototype of the `formats` provided to the\n  // constructor. These are used when constructing the internal Intl.NumberFormat\n  // and Intl.DateTimeFormat instances.\n\n  IntlMessageFormat.formats = {\n    number: {\n      currency: {\n        style: 'currency'\n      },\n      percent: {\n        style: 'percent'\n      }\n    },\n    date: {\n      short: {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      medium: {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      long: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      full: {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      short: {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      medium: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      long: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      full: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  };\n  return IntlMessageFormat;\n}();\n\nexport { IntlMessageFormat };\nexport default IntlMessageFormat;","map":{"version":3,"sources":["../src/core.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { parse } from 'intl-messageformat-parser';\nimport memoizeIntlConstructor from 'intl-format-cache';\nimport { formatToParts, } from './formatters';\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return __assign(__assign(__assign({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {\n        all[k] = __assign(__assign({}, c1[k]), (c2[k] || {}));\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function (all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, __assign({}, defaultConfig));\n}\nexport function createDefaultFormatters(cache) {\n    if (cache === void 0) { cache = {\n        number: {},\n        dateTime: {},\n        pluralRules: {},\n    }; }\n    return {\n        getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\n        getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\n        getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules),\n    };\n}\nvar IntlMessageFormat = /** @class */ (function () {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        var _this = this;\n        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {},\n        };\n        this.format = function (values) {\n            var parts = _this.formatToParts(values);\n            // Hot path for straight simple msg translations\n            if (parts.length === 1) {\n                return parts[0].value;\n            }\n            var result = parts.reduce(function (all, part) {\n                if (!all.length ||\n                    part.type !== 0 /* literal */ ||\n                    typeof all[all.length - 1] !== 'string') {\n                    all.push(part.value);\n                }\n                else {\n                    all[all.length - 1] += part.value;\n                }\n                return all;\n            }, []);\n            if (result.length <= 1) {\n                return result[0] || '';\n            }\n            return result;\n        };\n        this.formatToParts = function (values) {\n            return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n        };\n        this.resolvedOptions = function () { return ({\n            locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],\n        }); };\n        this.getAst = function () { return _this.ast; };\n        if (typeof message === 'string') {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n            }\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message, {\n                normalizeHashtagInPlural: false,\n            });\n        }\n        else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError('A message must be provided as a String or AST.');\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        // Defined first because it's used to build the format pattern.\n        this.locales = locales;\n        this.formatters =\n            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);\n    }\n    Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n        get: function () {\n            if (!IntlMessageFormat.memoizedDefaultLocale) {\n                IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n            }\n            return IntlMessageFormat.memoizedDefaultLocale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    IntlMessageFormat.memoizedDefaultLocale = null;\n    IntlMessageFormat.__parse = parse;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            currency: {\n                style: 'currency',\n            },\n            percent: {\n                style: 'percent',\n            },\n        },\n        date: {\n            short: {\n                month: 'numeric',\n                day: 'numeric',\n                year: '2-digit',\n            },\n            medium: {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            long: {\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            full: {\n                weekday: 'long',\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n        },\n        time: {\n            short: {\n                hour: 'numeric',\n                minute: 'numeric',\n            },\n            medium: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n            },\n            long: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n            full: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n        },\n    };\n    return IntlMessageFormat;\n}());\nexport { IntlMessageFormat };\nexport default IntlMessageFormat;\n//# sourceMappingURL=core.js.map"]},"metadata":{},"sourceType":"module"}