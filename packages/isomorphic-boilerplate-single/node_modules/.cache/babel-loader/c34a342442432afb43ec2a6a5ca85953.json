{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n/**\n * Get ligature offset by index\n *\n * Ex. ffi ligature\n *\n *   glyphs:         l  o  f  f  i  m\n *   glyphIndices:   0  1  2  2  2  3\n *   offset:         0  0  0  1  2  0\n *\n * @param  {number}  index\n * @param  {Object}  run\n * @return {number} ligature offset\n */\n\n\nvar offset = function offset(index, run) {\n  var value = R.pathOr(null, ['glyphIndices', index], run);\n  return R.compose(R.length, R.dropWhile(R.gt(value)), R.slice(0, index), R.propOr([], 'glyphIndices'))(run);\n};\n\nvar _default = R.curryN(2, offset);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/pezannekhambatta/Desktop/resumio/node_modules/@react-pdf/textkit/run/offset.js"],"names":["_interopRequireWildcard","require","exports","__esModule","R","offset","index","run","value","pathOr","compose","length","dropWhile","gt","slice","propOr","_default","curryN"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,CAAC,GAAGJ,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAA/B;AAEA;;;;;;;;;;;;;;;AAaA,IAAII,MAAM,GAAG,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,GAAvB,EAA4B;AACvC,MAAIC,KAAK,GAAGJ,CAAC,CAACK,MAAF,CAAS,IAAT,EAAe,CAAC,cAAD,EAAiBH,KAAjB,CAAf,EAAwCC,GAAxC,CAAZ;AACA,SAAOH,CAAC,CAACM,OAAF,CAAUN,CAAC,CAACO,MAAZ,EAAoBP,CAAC,CAACQ,SAAF,CAAYR,CAAC,CAACS,EAAF,CAAKL,KAAL,CAAZ,CAApB,EAA8CJ,CAAC,CAACU,KAAF,CAAQ,CAAR,EAAWR,KAAX,CAA9C,EAAiEF,CAAC,CAACW,MAAF,CAAS,EAAT,EAAa,cAAb,CAAjE,EAA+FR,GAA/F,CAAP;AACD,CAHD;;AAKA,IAAIS,QAAQ,GAAGZ,CAAC,CAACa,MAAF,CAAS,CAAT,EAAYZ,MAAZ,CAAf;;AAEAH,OAAO,CAAC,SAAD,CAAP,GAAqBc,QAArB","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\n/**\n * Get ligature offset by index\n *\n * Ex. ffi ligature\n *\n *   glyphs:         l  o  f  f  i  m\n *   glyphIndices:   0  1  2  2  2  3\n *   offset:         0  0  0  1  2  0\n *\n * @param  {number}  index\n * @param  {Object}  run\n * @return {number} ligature offset\n */\nvar offset = function offset(index, run) {\n  var value = R.pathOr(null, ['glyphIndices', index], run);\n  return R.compose(R.length, R.dropWhile(R.gt(value)), R.slice(0, index), R.propOr([], 'glyphIndices'))(run);\n};\n\nvar _default = R.curryN(2, offset);\n\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}