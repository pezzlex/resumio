{"ast":null,"code":"import { getNamedFormat, filterProps } from '../utils';\nimport { ReactIntlError } from '../error';\nvar NUMBER_FORMAT_OPTIONS = ['localeMatcher', 'style', 'currency', 'currencyDisplay', 'unit', 'unitDisplay', 'useGrouping', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits', // ES2020 NumberFormat\n'compactDisplay', 'currencyDisplay', 'currencySign', 'notation', 'signDisplay', 'unit', 'unitDisplay'];\nexport function getFormatter(_a, getNumberFormat, options) {\n  var locale = _a.locale,\n      formats = _a.formats,\n      onError = _a.onError;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var format = options.format;\n  var defaults = format && getNamedFormat(formats, 'number', format, onError) || {};\n  var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n  return getNumberFormat(locale, filteredOptions);\n}\nexport function formatNumber(config, getNumberFormat, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  try {\n    return getFormatter(config, getNumberFormat, options).format(value);\n  } catch (e) {\n    config.onError(new ReactIntlError(\"FORMAT_ERROR\"\n    /* FORMAT_ERROR */\n    , 'Error formatting number.', e));\n  }\n\n  return String(value);\n}\nexport function formatNumberToParts(config, getNumberFormat, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  try {\n    return getFormatter(config, getNumberFormat, options).formatToParts(value);\n  } catch (e) {\n    config.onError(new ReactIntlError(\"FORMAT_ERROR\"\n    /* FORMAT_ERROR */\n    , 'Error formatting number.', e));\n  }\n\n  return [];\n}","map":{"version":3,"sources":["../../src/formatters/number.ts"],"names":[],"mappings":"AACA,SAAQ,cAAR,EAAwB,WAAxB,QAA0C,UAA1C;AAEA,SAAQ,cAAR,QAAiD,UAAjD;AAEA,IAAM,qBAAqB,GAAqC,CAC9D,eAD8D,EAG9D,OAH8D,EAI9D,UAJ8D,EAK9D,iBAL8D,EAM9D,MAN8D,EAO9D,aAP8D,EAQ9D,aAR8D,EAU9D,sBAV8D,EAW9D,uBAX8D,EAY9D,uBAZ8D,EAa9D,0BAb8D,EAc9D,0BAd8D,EAgB9D;AACA,gBAjB8D,EAkB9D,iBAlB8D,EAmB9D,cAnB8D,EAoB9D,UApB8D,EAqB9D,aArB8D,EAsB9D,MAtB8D,EAuB9D,aAvB8D,CAAhE;AA0BA,OAAM,SAAU,YAAV,CACJ,EADI,EAMJ,eANI,EAOJ,OAPI,EAOuD;MALzD,MAAA,GAAA,EAAA,CAAA,M;MACA,OAAA,GAAA,EAAA,CAAA,O;MACA,OAAA,GAAA,EAAA,CAAA,O;;AAGF,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA2D;;AAEpD,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA;AACP,MAAM,QAAQ,GAAK,MAAM,IACvB,cAAc,CAAC,OAAD,EAAW,QAAX,EAAqB,MAArB,EAA6B,OAA7B,CADE,IAEhB,EAFF;AAGA,MAAM,eAAe,GAAG,WAAW,CAAC,OAAD,EAAU,qBAAV,EAAiC,QAAjC,CAAnC;AAEA,SAAO,eAAe,CAAC,MAAD,EAAS,eAAT,CAAtB;AACD;AAED,OAAM,SAAU,YAAV,CACJ,MADI,EAEJ,eAFI,EAGJ,KAHI,EAIJ,OAJI,EAIuD;AAA3D,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA2D;;AAE3D,MAAI;AACF,WAAO,YAAY,CAAC,MAAD,EAAS,eAAT,EAA0B,OAA1B,CAAZ,CAA+C,MAA/C,CAAsD,KAAtD,CAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,IAAA,MAAM,CAAC,OAAP,CACE,IAAI,cAAJ,CAAkB;AAAA;AAAlB,MAEE,0BAFF,EAGE,CAHF,CADF;AAOD;;AAED,SAAO,MAAM,CAAC,KAAD,CAAb;AACD;AAED,OAAM,SAAU,mBAAV,CACJ,MADI,EAEJ,eAFI,EAGJ,KAHI,EAIJ,OAJI,EAIuD;AAA3D,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA2D;;AAE3D,MAAI;AACF,WAAO,YAAY,CAAC,MAAD,EAAS,eAAT,EAA0B,OAA1B,CAAZ,CAA+C,aAA/C,CAA6D,KAA7D,CAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,IAAA,MAAM,CAAC,OAAP,CACE,IAAI,cAAJ,CAAkB;AAAA;AAAlB,MAEE,0BAFF,EAGE,CAHF,CADF;AAOD;;AAED,SAAO,EAAP;AACD","sourceRoot":"","sourcesContent":["import { getNamedFormat, filterProps } from '../utils';\nimport { ReactIntlError } from '../error';\nvar NUMBER_FORMAT_OPTIONS = [\n    'localeMatcher',\n    'style',\n    'currency',\n    'currencyDisplay',\n    'unit',\n    'unitDisplay',\n    'useGrouping',\n    'minimumIntegerDigits',\n    'minimumFractionDigits',\n    'maximumFractionDigits',\n    'minimumSignificantDigits',\n    'maximumSignificantDigits',\n    // ES2020 NumberFormat\n    'compactDisplay',\n    'currencyDisplay',\n    'currencySign',\n    'notation',\n    'signDisplay',\n    'unit',\n    'unitDisplay',\n];\nexport function getFormatter(_a, getNumberFormat, options) {\n    var locale = _a.locale, formats = _a.formats, onError = _a.onError;\n    if (options === void 0) { options = {}; }\n    var format = options.format;\n    var defaults = ((format &&\n        getNamedFormat(formats, 'number', format, onError)) ||\n        {});\n    var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n    return getNumberFormat(locale, filteredOptions);\n}\nexport function formatNumber(config, getNumberFormat, value, options) {\n    if (options === void 0) { options = {}; }\n    try {\n        return getFormatter(config, getNumberFormat, options).format(value);\n    }\n    catch (e) {\n        config.onError(new ReactIntlError(\"FORMAT_ERROR\" /* FORMAT_ERROR */, 'Error formatting number.', e));\n    }\n    return String(value);\n}\nexport function formatNumberToParts(config, getNumberFormat, value, options) {\n    if (options === void 0) { options = {}; }\n    try {\n        return getFormatter(config, getNumberFormat, options).formatToParts(value);\n    }\n    catch (e) {\n        config.onError(new ReactIntlError(\"FORMAT_ERROR\" /* FORMAT_ERROR */, 'Error formatting number.', e));\n    }\n    return [];\n}\n//# sourceMappingURL=number.js.map"]},"metadata":{},"sourceType":"module"}