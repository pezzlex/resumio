{"ast":null,"code":"import axios from 'axios';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const LOGOUT_USER = 'LOGOUT_USER';\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const REGISTER_FAILURE = 'REGISTER_FAILURE';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const CLEAR_STATUS = 'CLEAR_STATUS';\nexport const EMAIL_FAILURE = 'EMAIL_FAILURE';\nexport const EMAIL_SUCCESS = 'EMAIL_SUCCESS';\nexport const SUCCESS = 'SUCCESS';\nexport const FAILURE = 'FAILURE';\nexport const IS_VALID_LINK = 'IS_VALID_LINK';\nexport const IS_NOT_VALID_LINK = 'IS_NOT_VALID_LINK';\nexport const fetchToken = ({\n  email,\n  password\n}) => {\n  console.log(email, password);\n  return dispatch => {\n    axios.post(\"http://localhost:4000/users/login\", {\n      email,\n      password\n    }).then(response => {\n      if (response.status === 200) {\n        const filter = ({\n          firstName,\n          lastName,\n          email,\n          token\n        }) => ({\n          firstName,\n          lastName,\n          email,\n          token\n        });\n\n        dispatch({\n          type: LOGIN_USER,\n          payload: filter(response.data.data)\n        });\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: response.data.message\n        });\n      }\n    }).catch(err => {\n      dispatch({\n        type: LOGIN_FAILURE,\n        payload: err.response.data.message\n      });\n    });\n  };\n};\nexport const logoutUser = () => {\n  localStorage.removeItem('jwtToken');\n  delete axios.defaults.headers.common['Authorization'];\n  return dispatch => dispatch({\n    type: LOGOUT_USER\n  });\n};\nexport const registerUser = ({\n  firstName,\n  lastName,\n  email,\n  username,\n  password\n}) => {\n  return dispatch => {\n    axios.post(\"http://localhost:4000/users/register\", {\n      firstName,\n      lastName,\n      email,\n      username,\n      password\n    }).then(response => {\n      if (response.status === 200) {\n        dispatch(fetchToken({\n          username,\n          password\n        }));\n        dispatch({\n          type: REGISTER_SUCCESS,\n          payload: response.data.message\n        });\n      }\n    }).catch(err => {\n      dispatch({\n        type: REGISTER_FAILURE,\n        payload: err.response.data.message\n      });\n    });\n  };\n};\nexport const clearStatus = () => {\n  return dispatch => dispatch({\n    type: CLEAR_STATUS\n  });\n};\nexport const getTempLink = email => {\n  return dispatch => {\n    axios.post(\"http://localhost:4000/users/get-temp-link\", {\n      email\n    }).then(response => {\n      if (response.status === 200) {\n        dispatch({\n          type: EMAIL_SUCCESS,\n          payload: response.data.message\n        });\n      }\n    }).catch(err => {\n      dispatch({\n        type: EMAIL_FAILURE,\n        payload: err.response.data.message\n      });\n    });\n  };\n};\nexport const verifyValidLink = ({\n  userId,\n  token\n}) => {\n  return dispatch => {\n    axios.get(\"http://localhost:4000/users/reset-password/\".concat(userId, \"/\").concat(token)).then(response => {\n      if (response.status === 200) {\n        dispatch({\n          type: IS_VALID_LINK,\n          payload: response.data.message\n        });\n      }\n    }).catch(err => {\n      console.log('dispatching is not valid link');\n      dispatch({\n        type: IS_NOT_VALID_LINK,\n        payload: err.response.data.message\n      });\n    });\n  };\n};\nexport const resetPassword = ({\n  userId,\n  password,\n  token\n}) => {\n  console.log(userId, password);\n  return dispatch => {\n    axios.post(\"http://localhost:4000/users/reset-password\", {\n      userId,\n      password,\n      token\n    }).then(response => {\n      if (response.status === 200) {\n        dispatch({\n          type: SUCCESS,\n          payload: response.data.message\n        }); // invalidate right after success message sent\n\n        dispatch({\n          type: IS_NOT_VALID_LINK\n        });\n      }\n    }).catch(err => {\n      dispatch({\n        type: FAILURE,\n        payload: err.response.data.message\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/pezannekhambatta/Desktop/resumio/packages/isomorphic-boilerplate-single/src/redux/auth/actions.js"],"names":["axios","LOGIN_USER","LOGOUT_USER","REGISTER_USER","LOGIN_FAILURE","LOGIN_SUCCESS","REGISTER_FAILURE","REGISTER_SUCCESS","CLEAR_STATUS","EMAIL_FAILURE","EMAIL_SUCCESS","SUCCESS","FAILURE","IS_VALID_LINK","IS_NOT_VALID_LINK","fetchToken","email","password","console","log","dispatch","post","then","response","status","filter","firstName","lastName","token","type","payload","data","message","catch","err","logoutUser","localStorage","removeItem","defaults","headers","common","registerUser","username","clearStatus","getTempLink","verifyValidLink","userId","get","resetPassword"],"mappings":"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","sourcesContent":["import axios from 'axios'\nexport const LOGIN_USER = 'LOGIN_USER'\nexport const LOGOUT_USER = 'LOGOUT_USER'\nexport const REGISTER_USER = 'REGISTER_USER'\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE'\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nexport const REGISTER_FAILURE = 'REGISTER_FAILURE'\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS'\nexport const CLEAR_STATUS = 'CLEAR_STATUS'\nexport const EMAIL_FAILURE = 'EMAIL_FAILURE'\nexport const EMAIL_SUCCESS = 'EMAIL_SUCCESS'\nexport const SUCCESS = 'SUCCESS'\nexport const FAILURE = 'FAILURE'\nexport const IS_VALID_LINK = 'IS_VALID_LINK'\nexport const IS_NOT_VALID_LINK = 'IS_NOT_VALID_LINK'\n\nexport const fetchToken = ({ email, password }) => {\n  console.log(email, password)\n  return (dispatch) => {\n    axios\n      .post(`http://localhost:4000/users/login`, {\n        email,\n        password,\n      })\n      .then((response) => {\n        if (response.status === 200) {\n          const filter = ({ firstName, lastName, email, token }) => ({\n            firstName,\n            lastName,\n            email,\n            token,\n          })\n\n          dispatch({\n            type: LOGIN_USER,\n            payload: filter(response.data.data),\n          })\n          dispatch({\n            type: LOGIN_SUCCESS,\n            payload: response.data.message,\n          })\n        }\n      })\n      .catch((err) => {\n        dispatch({\n          type: LOGIN_FAILURE,\n          payload: err.response.data.message,\n        })\n      })\n  }\n}\n\nexport const logoutUser = () => {\n  localStorage.removeItem('jwtToken')\n  delete axios.defaults.headers.common['Authorization']\n  return (dispatch) =>\n    dispatch({\n      type: LOGOUT_USER,\n    })\n}\n\nexport const registerUser = ({\n  firstName,\n  lastName,\n  email,\n  username,\n  password,\n}) => {\n  return (dispatch) => {\n    axios\n      .post(`http://localhost:4000/users/register`, {\n        firstName,\n        lastName,\n        email,\n        username,\n        password,\n      })\n      .then((response) => {\n        if (response.status === 200) {\n          dispatch(fetchToken({ username, password }))\n          dispatch({\n            type: REGISTER_SUCCESS,\n            payload: response.data.message,\n          })\n        }\n      })\n      .catch((err) => {\n        dispatch({\n          type: REGISTER_FAILURE,\n          payload: err.response.data.message,\n        })\n      })\n  }\n}\n\nexport const clearStatus = () => {\n  return (dispatch) =>\n    dispatch({\n      type: CLEAR_STATUS,\n    })\n}\n\nexport const getTempLink = (email) => {\n  return (dispatch) => {\n    axios\n      .post(`http://localhost:4000/users/get-temp-link`, {\n        email,\n      })\n      .then((response) => {\n        if (response.status === 200) {\n          dispatch({\n            type: EMAIL_SUCCESS,\n            payload: response.data.message,\n          })\n        }\n      })\n      .catch((err) => {\n        dispatch({\n          type: EMAIL_FAILURE,\n          payload: err.response.data.message,\n        })\n      })\n  }\n}\n\nexport const verifyValidLink = ({ userId, token }) => {\n  return (dispatch) => {\n    axios\n      .get(`http://localhost:4000/users/reset-password/${userId}/${token}`)\n      .then((response) => {\n        if (response.status === 200) {\n          dispatch({\n            type: IS_VALID_LINK,\n            payload: response.data.message,\n          })\n        }\n      })\n      .catch((err) => {\n        console.log('dispatching is not valid link')\n        dispatch({\n          type: IS_NOT_VALID_LINK,\n          payload: err.response.data.message,\n        })\n      })\n  }\n}\n\nexport const resetPassword = ({ userId, password, token }) => {\n  console.log(userId, password)\n  return (dispatch) => {\n    axios\n      .post(`http://localhost:4000/users/reset-password`, {\n        userId,\n        password,\n        token,\n      })\n      .then((response) => {\n        if (response.status === 200) {\n          dispatch({\n            type: SUCCESS,\n            payload: response.data.message,\n          })\n          // invalidate right after success message sent\n          dispatch({\n            type: IS_NOT_VALID_LINK,\n          })\n        }\n      })\n      .catch((err) => {\n        dispatch({\n          type: FAILURE,\n          payload: err.response.data.message,\n        })\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}