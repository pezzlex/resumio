{"ast":null,"code":"import _arity from './_arity.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n\n      combined[combinedIdx] = result;\n\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n\n      combinedIdx += 1;\n    }\n\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}","map":{"version":3,"sources":["/Users/pezannekhambatta/Desktop/resumio/node_modules/ramda/es/internal/_curryN.js"],"names":["_arity","_isPlaceholder","_curryN","length","received","fn","combined","argsIdx","left","combinedIdx","arguments","result","apply"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;;;;;AAUA,eAAe,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCC,EAAnC,EAAuC;AACpD,SAAO,YAAY;AACjB,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,IAAI,GAAGL,MAAX;AACA,QAAIM,WAAW,GAAG,CAAlB;;AACA,WAAOA,WAAW,GAAGL,QAAQ,CAACD,MAAvB,IAAiCI,OAAO,GAAGG,SAAS,CAACP,MAA5D,EAAoE;AAClE,UAAIQ,MAAJ;;AACA,UAAIF,WAAW,GAAGL,QAAQ,CAACD,MAAvB,KAAkC,CAACF,cAAc,CAACG,QAAQ,CAACK,WAAD,CAAT,CAAf,IAA0CF,OAAO,IAAIG,SAAS,CAACP,MAAjG,CAAJ,EAA8G;AAC5GQ,QAAAA,MAAM,GAAGP,QAAQ,CAACK,WAAD,CAAjB;AACD,OAFD,MAEO;AACLE,QAAAA,MAAM,GAAGD,SAAS,CAACH,OAAD,CAAlB;AACAA,QAAAA,OAAO,IAAI,CAAX;AACD;;AACDD,MAAAA,QAAQ,CAACG,WAAD,CAAR,GAAwBE,MAAxB;;AACA,UAAI,CAACV,cAAc,CAACU,MAAD,CAAnB,EAA6B;AAC3BH,QAAAA,IAAI,IAAI,CAAR;AACD;;AACDC,MAAAA,WAAW,IAAI,CAAf;AACD;;AACD,WAAOD,IAAI,IAAI,CAAR,GAAYH,EAAE,CAACO,KAAH,CAAS,IAAT,EAAeN,QAAf,CAAZ,GAAuCN,MAAM,CAACQ,IAAD,EAAON,OAAO,CAACC,MAAD,EAASG,QAAT,EAAmBD,EAAnB,CAAd,CAApD;AACD,GApBD;AAqBD","sourcesContent":["import _arity from './_arity.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}"]},"metadata":{},"sourceType":"module"}