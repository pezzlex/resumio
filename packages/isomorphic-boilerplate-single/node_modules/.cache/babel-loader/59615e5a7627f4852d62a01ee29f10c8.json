{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as hoistNonReactStatics_ from 'hoist-non-react-statics'; // Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\n\nvar hoistNonReactStatics = hoistNonReactStatics_.default || hoistNonReactStatics_;\nimport { invariantIntlContext } from '../utils';\n\nfunction getDisplayName(Component) {\n  return Component.displayName || Component.name || 'Component';\n} // TODO: We should provide initial value here\n\n\nvar IntlContext = React.createContext(null);\nvar IntlConsumer = IntlContext.Consumer,\n    IntlProvider = IntlContext.Provider;\nexport var Provider = IntlProvider;\nexport var Context = IntlContext;\nexport default function injectIntl(WrappedComponent, options) {\n  var _a = options || {},\n      _b = _a.intlPropName,\n      intlPropName = _b === void 0 ? 'intl' : _b,\n      _c = _a.forwardRef,\n      forwardRef = _c === void 0 ? false : _c,\n      _d = _a.enforceContext,\n      enforceContext = _d === void 0 ? true : _d;\n\n  var WithIntl = function WithIntl(props) {\n    return React.createElement(IntlConsumer, null, function (intl) {\n      var _a;\n\n      if (enforceContext) {\n        invariantIntlContext(intl);\n      }\n\n      var intlProp = (_a = {}, _a[intlPropName] = intl, _a);\n      return React.createElement(WrappedComponent, __assign({}, props, intlProp, {\n        ref: forwardRef ? props.forwardedRef : null\n      }));\n    });\n  };\n\n  WithIntl.displayName = \"injectIntl(\" + getDisplayName(WrappedComponent) + \")\";\n  WithIntl.WrappedComponent = WrappedComponent;\n\n  if (forwardRef) {\n    return hoistNonReactStatics(React.forwardRef(function (props, ref) {\n      return React.createElement(WithIntl, __assign({}, props, {\n        forwardedRef: ref\n      }));\n    }), WrappedComponent);\n  }\n\n  return hoistNonReactStatics(WithIntl, WrappedComponent);\n}","map":{"version":3,"sources":["../../src/components/injectIntl.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAK,qBAAZ,MAAuC,yBAAvC,C,CACA;AACA;AACA;AACA;;AACA,IAAM,oBAAoB,GACvB,qBAA6B,CAAC,OAA9B,IAAyC,qBAD5C;AAEA,SAAQ,oBAAR,QAAmC,UAAnC;;AAGA,SAAS,cAAT,CAAwB,SAAxB,EAA2D;AACzD,SAAO,SAAS,CAAC,WAAV,IAAyB,SAAS,CAAC,IAAnC,IAA2C,WAAlD;AACD,C,CAED;;;AACA,IAAM,WAAW,GAAG,KAAK,CAAC,aAAN,CAA+B,IAA/B,CAApB;AACO,IAAA,YAAA,GAAA,WAAA,CAAA,QAAA;AAAA,IAAwB,YAAA,GAAA,WAAA,CAAA,QAAxB;AAEP,OAAO,IAAM,QAAQ,GAAG,YAAjB;AACP,OAAO,IAAM,OAAO,GAAG,WAAhB;AAwCP,eAAc,SAAU,UAAV,CAMZ,gBANY,EAOZ,OAPY,EAO4B;AAMlC,MAAA,EAAA,GAAA,OAAA,IAAA,EAAA;AAAA,MAAC,EAAA,GAAA,EAAA,CAAA,YAAD;AAAA,MAAC,YAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,MAAA,GAAA,EAAD;AAAA,MAAwB,EAAA,GAAA,EAAA,CAAA,UAAxB;AAAA,MAAwB,UAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EAAxB;AAAA,MAA4C,EAAA,GAAA,EAAA,CAAA,cAA5C;AAAA,MAA4C,cAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,EAA5C;;AAGN,MAAM,QAAQ,GAEV,SAFE,QAEF,CAAA,KAAA,EAAK;AAAI,WACX,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EACG,UAAC,IAAD,EAAK;;;AACJ,UAAI,cAAJ,EAAoB;AAClB,QAAA,oBAAoB,CAAC,IAAD,CAApB;AACD;;AACD,UAAM,QAAQ,IAAA,EAAA,GAAA,EAAA,EAAI,EAAA,CAAC,YAAD,CAAA,GAAgB,IAApB,EAAwB,EAAxB,CAAd;AAEA,aACE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB,QAAA,CAAA,EAAA,EACX,KADW,EAEX,QAFW,EAEH;AACZ,QAAA,GAAG,EAAE,UAAU,GAAG,KAAK,CAAC,YAAT,GAAwB;AAD3B,OAFG,CAAjB,CADF;AARO,KACX,CADW;AAiBZ,GAnBD;;AAoBA,EAAA,QAAQ,CAAC,WAAT,GAAuB,gBAAc,cAAc,CAAC,gBAAD,CAA5B,GAA8C,GAArE;AACA,EAAA,QAAQ,CAAC,gBAAT,GAA4B,gBAA5B;;AAEA,MAAI,UAAJ,EAAgB;AACd,WAAO,oBAAoB,CACzB,KAAK,CAAC,UAAN,CAAuB,UAAC,KAAD,EAAW,GAAX,EAAc;AAAK,aACxC,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS,QAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,QAAA,YAAY,EADO;AACrB,OAAV,CAAT,CADwC;AAEzC,KAFD,CADyB,EAIzB,gBAJyB,CAA3B;AAMD;;AAED,SAAO,oBAAoB,CAAC,QAAD,EAAW,gBAAX,CAA3B;AACD","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as hoistNonReactStatics_ from 'hoist-non-react-statics';\n// Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\nvar hoistNonReactStatics = hoistNonReactStatics_.default || hoistNonReactStatics_;\nimport { invariantIntlContext } from '../utils';\nfunction getDisplayName(Component) {\n    return Component.displayName || Component.name || 'Component';\n}\n// TODO: We should provide initial value here\nvar IntlContext = React.createContext(null);\nvar IntlConsumer = IntlContext.Consumer, IntlProvider = IntlContext.Provider;\nexport var Provider = IntlProvider;\nexport var Context = IntlContext;\nexport default function injectIntl(WrappedComponent, options) {\n    var _a = options || {}, _b = _a.intlPropName, intlPropName = _b === void 0 ? 'intl' : _b, _c = _a.forwardRef, forwardRef = _c === void 0 ? false : _c, _d = _a.enforceContext, enforceContext = _d === void 0 ? true : _d;\n    var WithIntl = function (props) { return (React.createElement(IntlConsumer, null, function (intl) {\n        var _a;\n        if (enforceContext) {\n            invariantIntlContext(intl);\n        }\n        var intlProp = (_a = {}, _a[intlPropName] = intl, _a);\n        return (React.createElement(WrappedComponent, __assign({}, props, intlProp, { ref: forwardRef ? props.forwardedRef : null })));\n    })); };\n    WithIntl.displayName = \"injectIntl(\" + getDisplayName(WrappedComponent) + \")\";\n    WithIntl.WrappedComponent = WrappedComponent;\n    if (forwardRef) {\n        return hoistNonReactStatics(React.forwardRef(function (props, ref) { return (React.createElement(WithIntl, __assign({}, props, { forwardedRef: ref }))); }), WrappedComponent);\n    }\n    return hoistNonReactStatics(WithIntl, WrappedComponent);\n}\n//# sourceMappingURL=injectIntl.js.map"]},"metadata":{},"sourceType":"module"}